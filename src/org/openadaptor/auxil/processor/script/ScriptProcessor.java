/*
 Copyright (C) 2001 - 2007 The Software Conservancy as Trustee. All rights reserved.

 Permission is hereby granted, free of charge, to any person obtaining a copy of
 this software and associated documentation files (the "Software"), to deal in the
 Software without restriction, including without limitation the rights to use, copy,
 modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
 and to permit persons to whom the Software is furnished to do so, subject to the
 following conditions:

 The above copyright notice and this permission notice shall be included in all 
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 Nothing in this notice shall be deemed to grant any rights to trademarks, copyrights,
 patents, trade secrets or any other intellectual property of the licensor or any
 contributor except as expressly stated herein. No patent license is granted separate
 from the Software, for code that you delete from the Software, or for combinations
 of the Software with other software or hardware.
 */

package org.openadaptor.auxil.processor.script;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;

import javax.script.Compilable;
import javax.script.CompiledScript;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.openadaptor.core.Component;
import org.openadaptor.core.IDataProcessor;
import org.openadaptor.core.exception.ConnectionException;
import org.openadaptor.core.exception.NullRecordException;
import org.openadaptor.core.exception.ProcessingException;
import org.openadaptor.core.exception.ValidationException;
/**
 * Processor which executes scripts in the context of a data record.
 * <br>
 * This may be configured with a script language (default is javascript).
 * The script to be executed may be supplied as a String, or within a 
 * file whose name is supplied. 
 * The script  be executed in the context of supplied records.
 * <br>
 * 
 * @author higginse
 * 
 */
public class ScriptProcessor extends Component implements IDataProcessor {
  private static final Log log =LogFactory.getLog(ScriptProcessor.class);
  public static final String DEFAULT_LANGUAGE="js"; //Javascript is the default language.
  public static final String DEFAULT_DATA_BINDING="oa_data"; //Bound name for data records

  protected ScriptEngine scriptEngine;
  protected String language=DEFAULT_LANGUAGE;
  protected String script;
  protected String scriptFilename;
  protected CompiledScript compiledScript;
  protected boolean compile = true;
  protected Object lastResult = null;
  protected String dataBinding = DEFAULT_DATA_BINDING;

  public ScriptProcessor() {
    super();
  }

  public ScriptProcessor(String id) {
    super(id);
  }
  /**
   * This associates the incoming data record with a bound name within
   * the script. 
   * <BR>
   * Defaults to {@link DEFAULT_DATA_BINDING}
   * @param dataBinding
   */

  public void setDataBinding(String dataBinding) {
    this.dataBinding = dataBinding;
  }

  
  /**
   * This holds the last result from script execution.
   * @return
   */
  protected Object getLastResult() {
    return lastResult;
  }

  /**
   * Flag to indicate whether script should be compiled, if possible.
   * <br>
   * Defaults to <code>true</code>
   * 
   * @param compile
   */
  public void setCompile(boolean compile) {
    this.compile = compile;
  }

  /**
   * Assign the script to be executed.
   * @param script
   */
  public void setScript(String script) {
    this.script = script;
  }
  
  /**
   * Set the name of a file which contains the script to run.
   * <br>
   * If <code>script</code> property is set, this will be
   * ignored
   * @param scriptFilename
   */
  public void setScriptFilename(String scriptFilename) {
    this.scriptFilename = scriptFilename;
  }

  /**
   * Sets the scripting language to be used.
   * <br>
   * Defaults to {@link DEFAULT_LANGUAGE}
   * @param language
   */
  public void setLanguage(String language) {
    this.language = language;
  }

  /**
   * Get the ScriptEngine as generated by the
   * ScriptEngineManager when validate() is called.
   * @return
   */
  public ScriptEngine getScriptEngine() {
    return scriptEngine;
  }
  /**
   * Process a data item.
   * It will bind the data using the configured databinding, to
   * make it available to the script.
   * 
   * The bound object will be returned in a single Element Object[]
   * <br>
   * Note: If compilation is not possible, and the script is contained in a 
   * file, then the file will be read each time a datum is being processed. This
   * should be avoided for obvious reasons :-)
   */
  public synchronized Object[] process(Object data) {
    if (data==null) { //conform to IDataProcessor contract.
      throw new NullRecordException("Null record not permitted");
    }
    try {
      scriptEngine.put(dataBinding, data);
      if (compiledScript != null) {
        lastResult = compiledScript.eval();
      } else {
        if (script != null) {
          lastResult = scriptEngine.eval(script);
        } else {
          lastResult = scriptEngine.eval(new FileReader(scriptFilename));
        }
      }
      data = scriptEngine.get(dataBinding);
      return data != null ? new Object[] {data} : new Object[0];
    } catch (ScriptException e) {
      throw new ProcessingException("failed to compile script, " + e.getMessage()
          + " line " + e.getLineNumber() + " col " + e.getColumnNumber(), e, this);
    } catch (FileNotFoundException e) {
      throw new ConnectionException("failed to load script file, " + e.getMessage()
          + scriptFilename, e, this);
    }
  }

  /**
   * Reset has no effect here unless overridden
   */
  public void reset(Object context) {
  }

  /**
   * Validate the configuration of this component.
   * <br>
   * In addition it will create a script engine, and
   * compile the supplied script if possible, via
   * a call to initialise()
   */
  public void validate(List exceptions) {
    if (exceptions==null) { //IDataProcessor requires a non-null List
      throw new IllegalArgumentException("exceptions List may not be null");
    }
    if (language == null || language.trim().length()==0) {
      exceptions.add(new ValidationException("Property scriptName may not be <null> or empty", this));
    }
    if (script == null) {
      if (scriptFilename==null) {
        exceptions.add(new ValidationException("Exactly one of script or scriptFilename property should be set", this));
      }
    }
    else { //Script has been configured
      if (scriptFilename!=null) {
        log.warn("Both script and scriptFilename have been configured. scriptFilename will be ignored!");
      }
    }
    if (exceptions.isEmpty()) {
      try {
        initialise();
      }
      catch (ValidationException ve){
        exceptions.add(ve);
      }
    }
  }
  
  /**
   * create a ScriptEngine.
   * <br>
   * Default behaivour is to call 
   * new ScriptEngineManager().getEngineByName(language);
   * @return creates ScriptEngine instance
   */
  protected ScriptEngine createScriptEngine() {
    return new ScriptEngineManager().getEngineByName(language);
  }

  /**
   * Initialise the script engine.
   * <br>
   * This will create a script engine, and compile the supplied
   * script is compilation is possible, and enabled.
   * @throws ValidationException
   */
  private void initialise() throws ValidationException {
    log.info("Initialising script engine for language: "+language);
    log.debug("Compile flag: "+compile);
    scriptEngine = createScriptEngine();
    if (compile && scriptEngine instanceof Compilable) {
      Compilable compilableScriptEngine=(Compilable)scriptEngine;
      try {
        if (script != null) {
          log.debug("Compiling script: "+script);
          compiledScript = compilableScriptEngine.compile(script);
        } else {
          log.debug("Compiling script from file: "+scriptFilename);
          compiledScript = compilableScriptEngine.compile(new FileReader(scriptFilename));
        }
        log.info("Script compiled successfully");
      } catch (ScriptException e) {
        String failMsg="Failed to compile script, " + e.getMessage() + " line " + e.getLineNumber() + " col " + e.getColumnNumber();
        log.warn(failMsg);
        throw new ValidationException(failMsg, e, this);
      } catch (FileNotFoundException e) {
        String failMsg="Failed to compile script, " + e.getMessage();
        log.warn(failMsg);
        throw new ValidationException(failMsg, e, this);
      }
    }
  }

}
