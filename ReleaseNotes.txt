=================================================
openadaptor3 production 3.3 Release Notes

See licences/licence.txt for Licence information.
=================================================

Date: 5th October 2007
Author: openadaptor Core Team

openadaptor 3.3
=======

Summary
=======
This is the third release of openadaptor 3

The openadaptor white paper can be downloaded from:

https://www.openadaptor.org/docs/whitepaper.pdf


This release focuses on stabilization. A number of areas have been reworked
or significantly enhanced.

==============================================================================

Major Changes
=============

This section details the main changes and enhancements in openadaptor 3.3

Documentation
=============

No major changes. Ongoing improvements to JavaDocs and to Examples.

Configuration
=============

No major changes. Some detail changes have been made to the configuration of 
individual components. See these separately for details.

Database
========

JDBC Read Connectors & Polling Read Connectors
----------------------------------------------

JDBC read connectors and polling read connectors have undergone a significant 
rework: 

  * The concept of an IPollingReadConnector that wraps another read connector 
    has been introduced. An IPollingReadConnector basically defines the way the 
    underlying read connector will poll its resource. The idea follows the 
    Decorator design pattern and is similar to how input and output streams 
    can be 'wrapped' in the Java I/O API

  * Three implementations of IPollingReadConnector have been implemented: 
    LoopingPollingReadConnector, CronnablePollingReadConnector and 
    DBEventDrivenPollingReadConnector. The first two were based on the legacy 
    (now depricated) PollingReadConnector. The last was based on 
    JDBCEventReadConnector.

  * JDBCPollConnector has been deleted and its role subsumed by 
    JDBCReadConnector.

  * JDBCEventReadConnector has been deleted. Its role is now shared between
    JDBCReadConnector and DBEventDrivenPollingReadConnector.

  * JDBCReadConnector now has the batching capability - result sets can be read 
    in batches of say, a 1000 records, rather than one by one, which should 
    increase performance. Batching is available via the batchSize property 
    (maxSize=0 means the entire result set is read in one batch, maxSize=1 means
    a batch will hold one element, maxSize=1000 means one batch = thousand 
    elements etc).

  * XML and orderedmap ResultSetConverters were renamed to 
    ResultSetToXMLConverter and ResultSetToOrderedMapConverter respectively.

Since some of the classes were deleted and some renamed, certain changes need 
to be done to the existing deployed adaptors in versions 3.2.1 and 3.2.1.1 when 
upgrading them to version 3.3. The following table shows which classes need to 
be replaced in adaptors config files and how to replace them:

|------------------------------------------------------------------------------|
|     OA 3.2.1.1                 |            OA 3.3                           |    
|------------------------------------------------------------------------------|
|                                |                                             |
| JDBCPollConnector (deleted)    | JDBCReadConnector wrapped in                |  
|                                | LoopingPollingReadConnector with pollLimit  |
|                                | property set to 0 and pollIntervalSecs set  | 
|                                | to 1 (see EX 1)                             |
|                                |                                             |
|------------------------------------------------------------------------------|
|                                |                                             |
|JDBCEventReadConnector (deleted)| JDBCReadConnector wrapped in                | 
|                                | DBEventDrivenPollingReadConnector (EX 2)    |  
|                                |                                             |
|------------------------------------------------------------------------------|
|                                |                                             |
|PollingReadConnector            | either LoopingPollingReadConnector or       |
|         (deprecated)           | CronnablePollingReadConnector depending on  |
|                                | which mode (interval or cron) the           |
|                                | PollingReadConnector  was used in .         |
|                                |                                             |
|------------------------------------------------------------------------------|
|                                |                                             |
| ResultSetConverter             | ResultSetToOrderedMapConverter              |
| in orderedmap package (renamed)|                                             |
|                                |                                             |
|------------------------------------------------------------------------------|
|                                |                                             |
| ResultSetConverter             | ResultSetToXMLConverter                     |
| in xml package (renamed)       |                                             |
|                                |                                             |
|------------------------------------------------------------------------------|

EXAMPLE 1.

OA 3.2.1.1:

<bean id="Reader" 
      class="org.openadaptor.auxil.connector.jdbc.reader.JDBCPollConnector">
 <property name="jdbcConnection" ref="JdbcConnection"/>
 <property name="sqlStatement" value="{ call PollTradeEvent () }"/>
 <property name="resultSetConverter">
  <bean 
   class="org.openadaptor.auxil.connector.jdbc.reader.xml.ResultSetConverter"/>
 </property>
</bean>

OA 3.3:

<bean id="Reader" 
      class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
 <property name="jdbcConnection" ref="JdbcConnection"/>
 <property name="sql" value="{ call PollTradeEvent () }"/>
 <property name="resultSetConverter">
  <bean class=
    "org.openadaptor.auxil.connector.jdbc.reader.xml.ResultSetToXMLConverter"/>
 </property>
</bean>
  
<bean id="PollingReader" 
      class="org.openadaptor.core.connector.LoopingPollingReadConnector">
 <property name="pollLimit" value="3"/>
 <property name="pollIntervalMs" value="1000"/>
 <property name="delegate" ref="Reader"/>
</bean>

EXAMPLE 2.

OA 3.2.1.1:

<bean id="Reader" 
    class="org.openadaptor.auxil.connector.jdbc.reader.JDBCEventReadConnector">
 <property name="jdbcConnection" ref="JdbcConnection"/>
 <property name="eventServiceID" value="1"/>
 <property name="resultSetConverter">
  <bean class=
    "org.openadaptor.auxil.connector.jdbc.reader.xml.ResultSetToXMLConverter"/>
 </property>
</bean>

OA 3.3:

<bean id="Reader" 
      class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
 <property name="jdbcConnection" ref="JdbcConnection"/>
 <property name="resultSetConverter">
  <bean class=
    "org.openadaptor.auxil.connector.jdbc.reader.xml.ResultSetToXMLConverter"/>
 </property>
</bean>
  
<bean id="PollingReader" 
      class="org.openadaptor.core.connector.DBEventDrivenPollingReadConnector">
 <property name="eventServiceID" value="1"/>
 <property name="jdbcConnection" ref="JdbcConnection"/>
 <property name="delegate" ref="Reader"/>
</bean>	

JDBCWriteConnector refactor
---------------------------

JDBC write connector has been completely refactored.
The old JDBCWriteConnector has been deprecated, and moved
into a deprecated package, along with all of its supporting
classes.

1. JDBC writer components now support database batching.
2. Prepared statements are reused where possible.
3. Behaviour has been expanded to permit the use of java.util.Maps
    (subject to some limitations)
4. The components now pass data transparently to the jdbc drivers
    (i.e. no artificial type-conversion)

Users should migrate existing usages as follows:

JDBCWriteConnector (deprecated) -> JDBCWriteConnector

Implementations of IStatementConvertor have been refactored (as
ISQLWriter) as follows:

SQLConvertor                    -> RawSQLWriter
PreparedStatementTableConvertor -> MapTableWriter
TableStatementConvertor         -> MapTableWriter
CallableStatementConvertor      -> MapCallableStatementWriter
SQLStatementConvertor           -> MapCallableStatementWriter + stored proc

The pre-existing implementations have all been marked as deprecated;
further use is actively discouraged.

Processors
==========

ScriptProcessor refactor
------------------------

ScriptProcessor has been refactored. It should now be used in place of
the deprecated javascript variants.

1. Compiled Script property has been removed (it is dependent on
   the ScriptEngine)

2. Script language now defaults to javascript ("js")

3. ScriptEngine is no longer settable. It is generated automatically
   during the validate() method. Subclasses may override generation
   through the createScriptEngine() method.

4. Comments and logging have been added.

5. The default binding for records has been changed from 'data' to
   'oa_data'. This reduces the likelihood of a conflict between field
   names and the record itself, particularly for MapScriptProcessor
   (see next section). Note that this may require some changes to existing
   adaptors which use ScriptProcessors (e.g. change data to oa_data 
   in scripts).

MapScriptProcessor added
------------------------

This allows direct access to entries in Map records from scripts. Again
this should prove more useful than the javascript equivalents (which
have been marked deprecated)

ScriptFilterProcessor & ScriptConditionProcessor refactoring

Both of these have been changed to use delegation rather than
inheritance from ScriptProcessor. This means that other ScriptProcessor
instances (e.g. MapScriptProcessor) may be uses with them.

Thus existing usage of thes processors will have to have their configs
altered to match - i.e. the ScriptProcessor becomes a property of the
filter/condition one. Behaviour should be unchanged.

Core
====

Exception Handling
------------------

The exception handling mechanism has been revised:

  * setting the exceptionProcessor property on the Router is now the only of 
    manipulation of exception handling

  * exceptionMap, that allows for 'fine-grained' mapping between exception types
    and exception processing nodes is now set on ExceptionHandlerProxy class 
    rather than the Router.

  * exceptionList property setter has been removed from the Router (using 
    exceptionMap achieves the same purpose)

  * exception handler can now be made up of any number of nodes rather than a 
    single node

  * a concept of a message hospital has been introduced 

  * new section titled 'Step 11: Exception Handling' was added to the tutorial. 
    It explains the exception handling interface, different ways of configuring 
    the exceptionProcessor (including the message hospital) and provides 
    pointers to examples.

The following changes in adaptor configuration files are necessary to migrate 
from OA 3.2.1.x to 3.3:

|------------------------------------------------------------------------------|
|      OA 3.2.1.1                   |                 OA 3.3                   |    
|------------------------------------------------------------------------------|
|                                   |                                          |
| setting 'exceptionMap'  property  | setting 'exceptionMap' property on the   |
| on the Router                     | ExceptionHandlerProxy which is then set  |
|                                   | as exceptionProcessor on the Router      | 
|                                   | (see EX 1)                               |
|                                   |                                          |
|------------------------------------------------------------------------------|

EXAMPLE 1.

OA 3.2.1.1:

<bean class="org.openadaptor.core.router.Router">
 ...
 <property name="exceptionMap">
  <map>
   <entry key="java.lang.Exception" value-ref="FileWriter"/>
  </map>
 </property>
</bean>

OA 3.3:

<bean class="org.openadaptor.core.router.Router">
 ...
 <property name="exceptionProcessor" ref="ExceptionHandler"/>
</bean>

<bean id="ExceptionHandler" 
      class="org.openadaptor.core.exception.ExceptionHandlerProxy">
 <property name="exceptionMap">
   <map>
     <entry key="java.lang.Exception" value-ref="FileWriter"/>
   </map>
 </property>
</bean>

Pipeline Deprecated
-------------------

The Pipeline class (org.openadaptor.core.router) has been
deprecated, and it's functionality promoted to the Router class.
(There was considerable confusion over the use of both classes,
and inconsistencies in the dual implementations.

It is still possible to define a pipeline, through the use
of the 'processors' property (this now delegates to a true
process map implementation).

ReadNode Refactored
-------------------

ReadNode has been refactored so that its IMessageProcessor implementation is
used by its IRunnable incarnation. This allows the two roles to be decoupled.
In future releases this will make the integration of openadaptor with container
managed resources much simpler.

Tests
=====

A move towards interface based unit tests has been made. This is still ongoing.

IDataProcessor interface testing
--------------------------------

The tests for this have been moved to the matching package (in the test
tree). Additionally, ScriptProcessor, ScriptFilterProcessor,
ScriptConditionProcessor & MapScriptProcessor now all extend the interface test.
Several other IDataProcessor implementations now include the interface testing 
(A few still remain to be modified however)

Other Interface tests
---------------------

Interface tests also exist in less complete form for IMessageProcessor, 
ILifecycleComponent, and ITransactionInitiator.

Miscellaneous & forum
===================== 

 * a public String getState() method added on the 
   org.openadaptor.core.adaptor.Adaptor class for JMX use (rwallsch).  

 * a public List getExitErrors() method added on the 
   org.openadaptor.core.adaptor.Adaptor class to allow for easier system testing
   of adaptors assembled 'by hand', i.e. not using Spring. The IRunnable 
   interface was extended by a new method: Throwable getExitError(). The method 
   was implemented in the only implementation that exists in OA: ReadNode.

 * an HTTP write connector and a HTTP read connector that polls an HTTP server 
   were added

 * SMTPConnection - added an optional mimeContentType property that allows to 
   configure the MIME type for the body of the message, or the attached body (tnd). 

 * AbstractDeilmitedStringConvertor - new optional properties for escaping 
   quoted characters were added: escapeQuoteCharacters, quoteEscapeChar and 
   smartEscapeQuoteCharacters. 
   They allow for more fine-grained configuration of behaviour when the 
   protectQuotedFields flag is set to true

 * registerComponents call in Adaptor moved following feedback (rwallsch).
 
 * MqConnection.nextRecord bug (return immediately rather than wait for the 
   specified timeout)fixed (erik).

Bug Fixes
=========

Specifically bugs mentioned in Project Tracker.

SC20: JDBCReadConnector fails when participating in a JTA Transaction
SC22: Node attempts invalid cast when processing Exceptions


Known Issues
============

In addition to issues already noted in openadaptor.org's project tracker a 
number of issues have shown up in testing for this release. 

JTA Two phase commit
--------------------

There seems to be a problem configuring an adaptor with an xa transacted reader
and writer using JOTM and Jboss MQ. This problem does not occur when JMS Grid 
is used in place of Jboss. The issue manifests as a forced rollback due to an
End Of File Exception. Its not known if this is merely a configuration issue
with the adaptor configuration file or a symptom of a deeper problem. More
investigation is needed to qualify this.


Unexpected fanout behaviour
--------------------------

Input records may be modified by processors; in certain
circumstances this may cause unexpected behaviour in fanout/exception
handling situations. where a 'peer' component is incorrectly supplied
with a modified input record, rather than the expected 'unmodified' one.


=================================================
openadaptor3 production 3.2.1.1 Release Notes

See licences/licence.txt for Licence information.
=================================================

Date: 7th June 2007
Author: openadaptor Core Team

openadaptor 3.2.1.1
=======

Summary
=======
This is the second production release of openadaptor 3.2.1

The openadaptor white paper can be downloaded from:

https://www.openadaptor.org/docs/whitepaper.pdf


This release focuses on fixing defects and some enhancements.

================================================================================


Enhancements
============

Documentation

  Jboss environment - 'Environment' section was added to the example/readme.html
  detailing versions of the JBoss application server successfully tested to work
  with those openadaptor examples that require a JMS implementation.


Configuration

  SpringApplication and SpringAdaptor have been enhanced to substitute for 
  system properties. Properties resources can be specified on the command line
  using one or more "-props <resource-name>" arguments. This is now the default
  behaviour. Default 3.2.1 behaviour can be reinstated by supplying "- noprops"
  as a command line argument.


Database

  TableStatementConverter has been modified to issue a warning and throw a 
  RecordFormatException when an incoming ordered map contains more fields than
  the output table it is writing to.


General Enhancements

  Legacy JMS 1.0.2 compliant connection code has been removed. We see no 
  advantage in maintaining this going forward.

  The Pipeline class has been refactored as a trivial subclass of Router. It is
  likely to be deprecated from the next release - Router already implements all
  of its behaviour and can be configured similarly if desired.

  PreparedStatementTableConverter has been added. This can offer significant 
  performance improvements over previous mechanisms by reusing a prepared 
  statement for multiple written data records.

  The exception manager/store has been temporarily removed. We intend to 
  refactor this to be easier to use and less reliant on webservices. In
  the meantime, exception handling and re-routing works as before using standard
  components. 

  We have begun the process of replacing usage of ISimpleRecord with Map
  instances. Ultimately this should allow generic processors which operate on 
  standard Maps.
 
  JDBCWriteConnector now allows preamble and postamble SQL to be executed before
  the connector starts processing records and after it finishes processing the
  last records, respectively.

  ScriptableSimpleRecord has been enhanced to support returned Object[] values.


Packaging

  The webservice tests have been removed as they are failing due to differences
  in the running environment. New tests will appear in due  course.


Defects

  SC13  Bug in OrderedMapToXmlConvertor - Conversion would fail if key could not
        be cast to a string as it used (String)key. Modified to use
        key.toString() instead which is considerably more optimistic.

  SC14  Bug in OrderedMapToDelimitedStringConvertor This was failing to convert
        non-String value objects to delimited strings. Now uses toString() to
        obtain its String representation

  SC15  Bug in Dom4J simple record processora - this would have failed if an
        attempt to put(key,null) was made.

  SC16  Bug in AbstractDelimitedStringConvertor - The mechanism for splitting
        strings was inconsistent; one character long delimiters were treated as
        either literal strings or regular expressions depending on the 
        delimited strings having quoted blocks in them.(blocks of text not to
        be broken up by the convertor even if they contained the delimiter)
        Users to specify via bean properties if the delimiter is to be always
        treated as a regular expression or always as a delimited string. For
        the default behaviour a one character delimiter (anticipated to be the
        case in most situations) is used as a literal string whereas longer
        delimiters are interpreted as regular expressions.
 
  SC17  Bug in AbstractDelimitedStringConvertor - it was dropping
        trailing empty elements.
        
  SC18  Null values in returned data will cause data to be lost. Fixed.
        
  SC19  OrderedMapToXMLConvertor could inadvertently have introduced illegal tag
        names in the generated XML. This would occur if an incoming key name
        contained a forward slash (/) character, which is illegal in XML tag
        names. Unfortunately dom4j does not detect this, and will generate XML
        with the illegal tag names. Subsequent parsing of the generated XML will
        fail however, by virtue of the illegal key name. Consequently, the
        mappedSlashValue property has been added. This specifies the value that
        will be substituted in place of slash characters in generated key names.
        By default this is implicitly set to DEFAULT_SLASH_SUBSTITUTE. Note that
        if the mappedSlashValue property is not explicitly set, a warning will
        issue each time a slash has been implicitly mapped (explicitly setting
        the mapped value will prevent such warnings).


++++++++++++++++++++++++

=================================================
openadaptor3.2.1.1 production Release Notes

See licences/licence.txt for Licence information.
=================================================

Date: 07th June 2007
Author: openadaptor Core Team

openadaptor 3.2.1.1
=======

Summary
=======
This is the first monthly release since the production release of 
openadaptor 3.2.1

The openadaptor white paper can be downloaded from:

https://www.openadaptor.org/docs/whitepaper.pdf








