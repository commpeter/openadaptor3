<?xml version="1.0" encoding="UTF-8"?>
<project name="openadaptor" default="retest.all">

  <tstamp/>
  <property name="debug" value="true"/>
  <property name="file.licence" value="${basedir}/src/org/openadaptor/util/licence.txt"/>
  <property file="${basedir}/checkout.properties"/>
  <property name="tag" value="trunk"/>

  <!-- defaults to use trunk. Override with a particular tag when building releases -->
  <condition property="examples.relative.basename" value="tags/${tag}">
    <not>
      <equals arg1="${tag}" arg2="trunk"/>
    </not>
  </condition>

  <property name="examples.relative.basename" value="${tag}" />

  <property name="dir.stub.classes" value="${basedir}/stub/classes"/>
  <property name="dir.stub.lib" value="${basedir}/stub/lib"/>
  <property name="dir.stub.src" value="${basedir}/stub/src"/>

  <property name="dir.classes" value="${basedir}/classes"/>
  <property name="dir.lib" value="${basedir}/lib"/>
  <property name="dir.src" value="${basedir}/src"/>
  <property name="dir.sql" value="${basedir}/sql"/>

	<!-- Moved build tools to support instead
  <property name="dir.builtools.src" value="${basedir}/buildtools/src"/>
  <property name="dir.buildtools.classes" value="${basedir}/buildtools/classes"/>
  <property name="dir.buildtools.backup" value="${basedir}/buildtools/backup"/>
   -->
	<property name="dir.support" value="${basedir}/support"/>
	 <property name="dir.buildtools.src" value="${dir.support}/src"/>
	 <property name="dir.buildtools.classes" value="${dir.support}/classes"/>
	 <property name="dir.buildtools.backup" value="${dir.support}/backup"/>

  <property name="dir.spring.classes" value="${basedir}/spring/classes"/>
  <property name="dir.spring.lib" value="${basedir}/spring/lib"/>
  <property name="dir.spring.src" value="${basedir}/spring/src"/>

  <property name="dir.test.classes" value="${basedir}/test/classes"/>
  <property name="dir.test.lib" value="${basedir}/test/lib"/>
  <property name="dir.test.output" value="${basedir}/test/output"/>

  <property name="dir.test.unit.src" value="${basedir}/test/unit/src"/>
  <property name="dir.test.unit.output" value="${basedir}/test/unit/output"/>

  <property name="dir.test.integration.src" value="${basedir}/test/integration/src"/>
  <property name="dir.test.integration.output" value="${basedir}/test/integration/output"/>

  <property name="dir.test.system.src" value="${basedir}/test/system/src"/>
  <property name="dir.test.system.output" value="${basedir}/test/system/output"/>

  <property name="dir.javadocs" value="${basedir}/javadocs"/>

  <property name="dir.example" value="${basedir}/example"/>
  <property name="dir.example.classes" value="${basedir}/example/classes"/>
  <property name="dir.example.docs" value="${basedir}/example/docs"/>
  <property name="dir.example.src" value="${basedir}/example/src"/>

  <mkdir dir="${dir.stub.classes}"/>
  <mkdir dir="${dir.classes}"/>
  <mkdir dir="${dir.spring.classes}"/>

  <mkdir dir="${dir.test.classes}"/>
  <mkdir dir="${dir.test.output}"/>
  <mkdir dir="${dir.test.unit.output}"/>
  <mkdir dir="${dir.test.integration.output}"/>
  <mkdir dir="${dir.test.system.output}"/>

  <mkdir dir="${dir.example.classes}"/>
  <mkdir dir="${dir.example.docs}"/>

  <mkdir dir="${dir.javadocs}"/>

  <path id="classpath.stub">
    <pathelement path="${dir.stub.classes}"/>
  </path>

  <path id="classpath">
    <pathelement path="${dir.stub.classes}"/>
    <fileset dir="${dir.lib}" includes="**/*.jar,**/*.zip"/>
  </path>

  <path id="classpath.spring">
    <pathelement path="${dir.classes}"/>
    <pathelement path="${dir.stub.classes}"/>
    <fileset dir="${dir.lib}" includes="**/*.jar,**/*.zip"/>
    <fileset dir="${dir.spring.lib}" includes="**/*.jar,**/*.zip"/>
  </path>
	
  <path id="classpath.javadoc">
  	<path refid="classpath"/>
    <fileset dir="${dir.spring.lib}" includes="**/*.jar,**/*.zip"/> 
  </path>
	

  <path id="classpath.test">
    <pathelement path="${dir.classes}"/>
    <pathelement path="${dir.stub.classes}"/>
    <pathelement path="${dir.spring.classes}"/>
    <pathelement path="${dir.test.classes}"/>
    <fileset dir="${dir.lib}" includes="**/*.jar,**/*.zip"/>
    <fileset dir="${dir.spring.lib}" includes="**/*.jar,**/*.zip"/>
    <fileset dir="${dir.test.lib}" includes="**/*.jar,**/*.zip"/>
    <pathelement path="${dir.test.lib}"/>
  </path>

  <path id="classpath.example">
    <pathelement path="${dir.example}"/>
    <pathelement path="${dir.classes}"/>
    <pathelement path="${dir.stub.classes}"/>
    <pathelement path="${dir.spring.classes}"/>
    <pathelement path="${dir.example.classes}"/>
    <fileset dir="${dir.lib}" includes="**/*.jar,**/*.zip"/>
    <fileset dir="${dir.spring.lib}" includes="**/*.jar,**/*.zip"/>
    <fileset dir="${dir.test.lib}" includes="**/*.jar,**/*.zip"/>
  </path>

  <target name="recompile.all" depends="clean.all, compile.all" description="clean and compile all code and tests"/>

  <target name="compile.all" depends="compile.stub, compile, compile.rmi, compile.spring, compile.test, compile.example" description="compile code and tests"/>

  <target name="compile.stub">
    <javac srcdir="${dir.stub.src}" destdir="${dir.stub.classes}" classpathref="classpath.stub"/>
  </target>

  <target name="compile">
    <javac srcdir="${dir.src}" destdir="${dir.classes}" classpathref="classpath" debug="${debug}"/>
    <copy todir="${dir.classes}" overwrite="true">
      <fileset dir="${dir.src}">
        <include name="**/*.properties"/>
        <include name="**/licence.txt"/>
        <include name="**/*.html"/>
        <exclude name="**/package.html"/>
      </fileset>
      <filterset>
        <filter token="BUILDCOMPILER" value="${ant.java.version}"/>
        <filter token="BUILDTIME" value="${DSTAMP}:${TSTAMP}"/>
        <filter token="BUILDTAG" value="${tag}"/>
      </filterset>
    </copy>
  </target>

  <target name="compile.rmi">
    <rmic classname="org.openadaptor.auxil.connector.rmi.RMIReadConnector$$RMIDataProcessor" base="${dir.classes}" sourcebase="${dir.classes}" debug="${debug}"/>
  </target>

  <target name="compile.spring">
    <javac srcdir="${dir.spring.src}" destdir="${dir.spring.classes}" classpathref="classpath.spring" debug="${debug}"/>
    <copy todir="${dir.spring.classes}" overwrite="true">
      <fileset dir="${dir.spring.src}" includes="**/*.xml"/>
    </copy>
  </target>

  <target name="compile.test" depends="compile.test.unit, compile.test.integration, compile.test.system"/>
 
  <!-- Temporarily added dependency on integration tests as this is where some common classes are. Need to revisit this.  --> 
  <target name="compile.test.unit" depends="compile.test.integration">
    <javac srcdir="${dir.test.unit.src}" destdir="${dir.test.classes}" classpathref="classpath.test" debug="${debug}"/>
    <copy todir="${dir.test.classes}" overwrite="true">
      <fileset dir="${dir.test.unit.src}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.test.integration">
    <javac srcdir="${dir.test.integration.src}" destdir="${dir.test.classes}" classpathref="classpath.test" debug="${debug}"/>
    <copy todir="${dir.test.classes}" overwrite="true">
      <fileset dir="${dir.test.integration.src}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.test.system">
    <javac srcdir="${dir.test.system.src}" destdir="${dir.test.classes}" classpathref="classpath.test" debug="${debug}"/>
    <copy todir="${dir.test.classes}" overwrite="true">
      <fileset dir="${dir.test.system.src}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.example">
    <javac srcdir="${dir.example.src}" destdir="${dir.example.classes}" classpathref="classpath.example" debug="${debug}"/>
  </target>

  <!-- Cleaning -->

  <target name="clean.all" depends="clean.stub, clean, clean.spring, clean.test, clean.example, clean.buildtools, clean.javadocs" description="clean all compile and test output"/>

  <target name="clean.stub">
    <delete>
      <fileset dir="${dir.stub.classes}" includes="**/*"/>
    </delete>
  </target>

  <target name="clean">
    <delete>
      <fileset dir="${dir.classes}" includes="**/*"/>
    </delete>
  </target>

  <target name="clean.spring">
    <delete>
      <fileset dir="${dir.spring.classes}" includes="**/*"/>
    </delete>
  </target>

  <target name="clean.test">
    <delete>
      <fileset dir="${dir.test.classes}" includes="**/*"/>
      <fileset dir="${dir.test.output}" includes="**/*"/>
      <fileset dir="${dir.test.unit.output}" includes="**/*"/>
      <fileset dir="${dir.test.integration.output}" includes="**/*"/>
      <fileset dir="${dir.test.system.output}" includes="**/*"/>
    </delete>
  </target>

  <target name="clean.example">
    <delete>
      <fileset dir="${dir.example.classes}" includes="**/*"/>
      <fileset dir="${dir.example.docs}" includes="**/*"/>
    </delete>
  </target>

  <target name="clean.javadocs">
    <delete>
      <fileset dir="${dir.javadocs}" includes="**/*"/>
    </delete>
  </target>

  <!-- Test targets -->

  <target name="test.all" depends="test.unit, test.integration, test.system" description="Run combined tests (currently unit, integration and system tests)"/>

  <target name="test.unit" depends="compile.test.unit" description="run unit tests only">
    <junit printsummary="true" dir="${basedir}">
      <classpath refid="classpath.test"/>
      <formatter type="xml"/>
      <batchtest fork="yes" todir="${dir.test.output}" errorProperty="test.failed" failureProperty="test.failed">
        <fileset dir="${dir.test.unit.src}">
          <include name="**/*TestCase.java"/>
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir="${dir.test.output}">
      <fileset dir="${dir.test.output}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${dir.test.output}"/>
     </junitreport>
     <fail message="Tests failed: check ${dir.test.output}" if="test.failed"/>
  </target>

  <target name="test.integration" depends="compile.test.integration" description="run integration tests only">
    <junit printsummary="true" dir="${basedir}">
      <classpath refid="classpath.test"/>
      <formatter type="xml"/>
      <batchtest fork="yes" todir="${dir.test.output}" errorProperty="test.failed" failureProperty="test.failed">
        <fileset dir="${dir.test.integration.src}">
          <include name="**/*TestCase.java"/>
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir="${dir.test.output}">
      <fileset dir="${dir.test.output}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${dir.test.output}"/>
     </junitreport>
     <fail message="Tests failed: check ${dir.test.output}" if="test.failed"/>
  </target>

  <target name="test.system" depends="compile.test.system" description="run system tests only">
    <junit printsummary="true" dir="${basedir}">
      <classpath refid="classpath.test"/>
      <formatter type="xml"/>
      <batchtest fork="yes" todir="${dir.test.output}" errorProperty="test.failed" failureProperty="test.failed">
        <fileset dir="${dir.test.system.src}">
          <include name="**/*TestCase.java"/>          
          <exclude name="**/MQ*.java"/>
          <exclude name="**/TIBCO*.java"/>
          <!-- -->
          <!--exclude name="**/WebService*.java"/-->
          <exclude name="**/WebServiceListeningReadConnector*.java"/>
          <exclude name="**/WebServicePollingReadConnector*.java"/>
          <exclude name="**/WebServiceWriteConnector*.java"/>
          <exclude name="**/JDBCConnectionTestCase*.java"/>
          <!-- -->
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir="${dir.test.output}">
      <fileset dir="${dir.test.output}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${dir.test.output}"/>
     </junitreport>
     <fail message="Tests failed: check ${dir.test.output}" if="test.failed"/>
  </target>

  <target name="compile.buildtools">
    <mkdir dir="${dir.buildtools.classes}"/>
    <javac srcdir="${dir.buildtools.src}" destdir="${dir.buildtools.classes}" classpath="${dir.classes}"/>
  </target>

  <target name="clean.buildtools">
    <delete dir="${dir.buildtools.classes}"/>
  </target>

  <target name="buildtools.taskdef" depends="compile.buildtools">
    <taskdef name="copyright" classname="org.openadaptor.util.ant.CopyrightTask" classpath="${dir.buildtools.classes}:${dir.classes}"/>
    <taskdef name="springcheck" classname="org.openadaptor.util.ant.SpringConfigValidateTask" classpath="${dir.buildtools.classes}"/>
    <taskdef name="jarcopy" classname="org.openadaptor.util.ant.VersionedJarCopyTask" classpath="${dir.buildtools.classes}"/>
  </target>

  <target name="copyright.check" depends="buildtools.taskdef" description="checks copyright notices in code">
    <copyright update="false" backupdir="${dir.buildtools.backup}" copyright="${file.licence}">
      <fileset dir="${dir.src}" includes="**/*.java"/>
      <fileset dir="${dir.spring.src}" includes="**/*.java"/>
      <fileset dir="${dir.example.src}" includes="**/*.java"/>
    </copyright>

  </target>

  <target name="copyright.correct" depends="buildtools.taskdef" description="corrects copyright notices in code">
    <copyright update="true" backupdir="${dir.buildtools.backup}" copyright="${file.licence}">
      <fileset dir="${dir.src}" includes="**/*.java"/>
      <fileset dir="${dir.spring.src}" includes="**/*.java"/>
      <fileset dir="${dir.example.src}" includes="**/*.java"/>
    </copyright>
  </target>
  
  <target name="example.springcheck" depends="buildtools.taskdef" description="checks spring config examples are valid">
    <springcheck classpathref="classpath.test" ignorestubexceptions="true">
      <fileset dir="${dir.example}/spring">
        <include name="**/*.xml"/>
        <exclude name="**/input/*"/>
        <exclude name="**/output/*"/>
        <exclude name="**/mq-*.xml"/>
        <exclude name="**/file/enrich-*.xml"/>
        <exclude name="**/db/jee/jboss/oa*.xml"/>
      </fileset>
    </springcheck>
  </target>

    <!-- javac srcdir="${dir.src}" destdir="${dir.classes}" classpathref="classpath" debug="${debug}"/ -->

  <target name="javadocs">
    <mkdir dir="${dir.javadocs}"/>
    <javadoc
      destdir="${dir.javadocs}"
      classpathref="classpath.javadoc"
      doctitle="openadaptor ${tag}"
      verbose="false"
      additionalparam="-quiet">
      <fileset dir="${dir.src}">
        <include name="**/*.java"/>
      </fileset>
      <fileset dir="${dir.spring.src}">
        <include name="**/*.java"/>
      </fileset>
    </javadoc>
  </target>

  <!-- Lets put the example doc generation here -->
  <target name="example.doc" depends="clean.example">
    <ant antfile="docs.xml" dir="${basedir}/example/tools" target="docs">
      <property name="filecomment.path.pattern1" value="HeadURL: https://www.openadaptor.org/svn/openadaptor3/${examples.relative.basename}/example/"/>
      <property name="filecomment.path.pattern2" value="HeadURL: https://openadaptor3.openadaptor.org/svn/openadaptor3/${examples.relative.basename}/example/"/>
    </ant>
  </target>

  <!-- Do a clean full build -->
  <target name="build.all" depends="recompile.all, example.springcheck, copyright.check, javadocs" description="build all source and documentation."/>

  <!-- Do a full build followed by a full test -->
  <target name="retest.all" depends="build.all, test.all" description="do a full clean, recompile and test"/>


  <!-- ********** Support for Packaging ******** -->




  <property name="dir.package" value="${basedir}/package"/>
  <property name="dir.package.lib" value="${dir.package}/lib"/>
  <property name="dir.package.example" value="${dir.package}/example"/>
  <property name="dir.package.sql" value="${dir.package}/sql"/>
  <property name="dir.package.javadocs" value="${dir.package}/javadocs"/>
  <property name="dir.package.example.doc" value="${dir.package}/example/docs" />

  <path id="classpath.test.package">
    <pathelement path="${dir.package.lib}"/>
    <pathelement path="${dir.package.lib}/openadaptor.jar"/>
    <pathelement path="${dir.package.lib}/openadaptor-depends.jar"/>
    <pathelement path="${dir.package.lib}/openadaptor-spring.jar"/>
    <pathelement path="${dir.package.lib}/openadaptor-stub.jar"/>
    <pathelement path="${dir.package.lib}/3rdparty/mail.jar"/>
    <pathelement path="${dir.package.lib}/3rdparty/activation.jar"/>

    <pathelement path="${dir.test.classes}"/>
    <fileset dir="${dir.test.lib}" includes="**/*.jar,**/*.zip"/>
  </path>

  <target name="clean.package">
    <delete dir="${dir.package}"/>
  </target>

  <target name="zip">
    <zip destfile="openadaptor-${tag}-bin.zip">
      <zipfileset dir="${dir.package}" prefix="openadaptor-${tag}"/>
    </zip>
  </target>

  <target name="lib.package" depends="buildtools.taskdef">
    <mkdir dir="${dir.package}"/>
    <mkdir dir="${dir.package.lib}"/>
    <mkdir dir="${dir.package.lib}/3rdparty"/>
    <jar destfile="${dir.package.lib}/openadaptor.jar">
      <fileset dir="${dir.classes}"/>
    </jar>
    <jar destfile="${dir.package.lib}/openadaptor-spring.jar">
      <fileset dir="${dir.spring.classes}"/>
    </jar>
    <jar destfile="${dir.package.lib}/openadaptor-stub.jar">
      <fileset dir="${dir.stub.classes}"/>
    </jar>
    <jar destfile="${dir.package.lib}/bootstrap.jar">
      <fileset dir="${dir.classes}" includes="org/openadaptor/bootstrap/*"/>
      <fileset dir="${dir.spring.classes}" includes="org/openadaptor/bootstrap/*"/>
      <fileset dir="${dir.lib}" includes="log4j.properties"/>
      <manifest>
        <attribute name="Main-Class" value="org.openadaptor.bootstrap.Usage"/>
      </manifest>
    </jar>
    <jarcopy todir="${dir.package.lib}/3rdparty" versionProperties="${basedir}/jarversions.properties" version="${tag}" manifest="${basedir}/lib/MANIFEST.MF">
      <fileset dir="${dir.lib}">
        <include name="*.jar"/>
        <include name="*.zip"/>
      </fileset>
      <fileset dir="${dir.spring.lib}">
        <include name="*.jar"/>
        <include name="*.zip"/>
      </fileset>
    </jarcopy>
    <jarcopy todir="${dir.package.lib}/3rdparty" versionProperties="${basedir}/jarversions.properties" version="${tag}">
      <fileset dir="${dir.test.lib}">
        <include name="*.jar"/>
        <include name="*.zip"/>
      </fileset>
    </jarcopy>
    <property name="includes.unqualified" value="org/**,javax/**,com/**,META-INF/services/**,META-INF/spring*"/>
    <jar destfile="${dir.package.lib}/openadaptor-depends.jar" manifest="lib/MANIFEST.MF">
      <!-- ordered list of jars, only includes qualified resources -->
      <zipfileset src="${dir.lib}/XmlSchema_1.1.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/carol.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/commons-codec_1.3.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/commons-collections_3.2.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/commons-httpclient_3.0.1.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/commons-jxpath_1.2.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/commons-lang_2.0.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/commons-logging.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/commons-net_1.2.2.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/dom4j_1.6.1.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/jaxen_1.1-beta-9.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/jaxrpc.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/jdom_1.0.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/jetty-util_6.0.1.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/jetty_6.0.1.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/jms.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/jmxremote.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/jmxri.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/jmxtools.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/jotm.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/jotm_jrmp_stubs.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/js_1_6R5.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/json.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/jta-spec_1.0.1.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/log4j-1.2.15.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/qname.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/quartz_1.5.2.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/resolver_from_xerces_2.9.0.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/rome_0.9.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/saaj.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/serializer_from_xerces_2.9.0.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/servlet-api_2.5-6.0.1.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/stax-api_1.0.1.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/velocity_1.4.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/wsdl4j_1.6.2.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/wstx-asl_3.0.1.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/xercesImpl_2.9.0.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/xfire-all_1.2.3.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/xml-apis_from_xerces_2.9.0.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/xstream-1.2.1.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/script.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.spring.lib}/spring-core_2.0.2.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.spring.lib}/spring_2.0.2.jar" includes="${includes.unqualified}"/>
      <!-- ordered list of jars, includes non-qualified resources but with prefix -->
      <zipfileset src="${dir.lib}/XmlSchema_1.1.jar" excludes="${includes.unqualified}" prefix="XmlSchema"/>
      <zipfileset src="${dir.lib}/carol.jar" excludes="${includes.unqualified}" prefix="carol"/>
      <zipfileset src="${dir.lib}/commons-codec_1.3.jar" excludes="${includes.unqualified}" prefix="commons-codec"/>
      <zipfileset src="${dir.lib}/commons-collections_3.2.jar" excludes="${includes.unqualified}" prefix="commons-collections"/>
      <zipfileset src="${dir.lib}/commons-httpclient_3.0.1.jar" excludes="${includes.unqualified}" prefix="commons-httpclient"/>
      <zipfileset src="${dir.lib}/commons-jxpath_1.2.jar" excludes="${includes.unqualified}" prefix="commons-jxpath"/>
      <zipfileset src="${dir.lib}/commons-lang_2.0.jar" excludes="${includes.unqualified}" prefix="commons-lang"/>
      <zipfileset src="${dir.lib}/commons-logging.jar" excludes="${includes.unqualified}" prefix="commons-logging"/>
      <zipfileset src="${dir.lib}/commons-net_1.2.2.jar" excludes="${includes.unqualified}" prefix="commons-net"/>
      <zipfileset src="${dir.lib}/dom4j_1.6.1.jar" excludes="${includes.unqualified}" prefix="dom4j"/>
      <zipfileset src="${dir.lib}/jaxen_1.1-beta-9.jar" excludes="${includes.unqualified}" prefix="jaxen"/>
      <zipfileset src="${dir.lib}/jaxrpc.jar" excludes="${includes.unqualified}" prefix="jaxrpc"/>
      <zipfileset src="${dir.lib}/jdom_1.0.jar" excludes="${includes.unqualified}" prefix="jdom"/>
      <zipfileset src="${dir.lib}/jetty-util_6.0.1.jar" excludes="${includes.unqualified}" prefix="jetty-util"/>
      <zipfileset src="${dir.lib}/jetty_6.0.1.jar" excludes="${includes.unqualified}" prefix="jetty"/>
      <zipfileset src="${dir.lib}/jms.jar" excludes="${includes.unqualified}" prefix="jms"/>
      <zipfileset src="${dir.lib}/jmxremote.jar" excludes="${includes.unqualified}" prefix="jmxremote"/>
      <zipfileset src="${dir.lib}/jmxri.jar" excludes="${includes.unqualified}" prefix="jmxri"/>
      <zipfileset src="${dir.lib}/jmxtools.jar" excludes="${includes.unqualified}" prefix="jmxtools"/>
      <zipfileset src="${dir.lib}/jotm.jar" excludes="${includes.unqualified}" prefix="jotm"/>
      <zipfileset src="${dir.lib}/jotm_jrmp_stubs.jar" excludes="${includes.unqualified}" prefix="jotm_jrmp_stubs"/>
      <zipfileset src="${dir.lib}/js_1_6R5.jar" excludes="${includes.unqualified}" prefix="js"/>
      <zipfileset src="${dir.lib}/json.jar" excludes="${includes.unqualified}" prefix="json"/>
      <zipfileset src="${dir.lib}/jta-spec_1.0.1.jar" excludes="${includes.unqualified}" prefix="jta-spec"/>
      <zipfileset src="${dir.lib}/log4j-1.2.15.jar" excludes="${includes.unqualified}" prefix="log4j"/>
      <zipfileset src="${dir.lib}/qname.jar" excludes="${includes.unqualified}" prefix="qname"/>
      <zipfileset src="${dir.lib}/quartz_1.5.2.jar" excludes="${includes.unqualified}" prefix="quartz"/>
      <zipfileset src="${dir.lib}/resolver_from_xerces_2.9.0.jar" excludes="${includes.unqualified}" prefix="resolver"/>
      <zipfileset src="${dir.lib}/rome_0.9.jar" excludes="${includes.unqualified}" prefix="rome"/>
      <zipfileset src="${dir.lib}/saaj.jar" excludes="${includes.unqualified}" prefix="saaj"/>
      <zipfileset src="${dir.lib}/serializer_from_xerces_2.9.0.jar" excludes="${includes.unqualified}" prefix="serializer"/>
      <zipfileset src="${dir.lib}/servlet-api_2.5-6.0.1.jar" excludes="${includes.unqualified}" prefix="servlet-api"/>
      <zipfileset src="${dir.lib}/stax-api_1.0.1.jar" excludes="${includes.unqualified}" prefix="stax-api"/>
      <zipfileset src="${dir.lib}/velocity_1.4.jar" excludes="${includes.unqualified}" prefix="velocity"/>
      <zipfileset src="${dir.lib}/wsdl4j_1.6.2.jar" excludes="${includes.unqualified}" prefix="wsdl4j"/>
      <zipfileset src="${dir.lib}/wstx-asl_3.0.1.jar" excludes="${includes.unqualified}" prefix="wstx-asl"/>
      <zipfileset src="${dir.lib}/xercesImpl_2.9.0.jar" excludes="${includes.unqualified}" prefix="xercesImpl"/>
      <zipfileset src="${dir.lib}/xfire-all_1.2.3.jar" excludes="${includes.unqualified}" prefix="xfire-all"/>
      <zipfileset src="${dir.lib}/xml-apis_from_xerces_2.9.0.jar" excludes="${includes.unqualified}" prefix="xml-apis"/>
      <zipfileset src="${dir.lib}/xstream-1.2.1.jar" excludes="${includes.unqualified}" prefix="xstream"/>
      <zipfileset src="${dir.lib}/script.jar" excludes="${includes.unqualified}" prefix="script"/>
      <zipfileset src="${dir.spring.lib}/spring-core_2.0.2.jar" excludes="${includes.unqualified}" prefix="spring-core"/>
      <zipfileset src="${dir.spring.lib}/spring_2.0.2.jar" excludes="${includes.unqualified}" prefix="spring"/>
    </jar>
    <copy todir="${dir.package.lib}">
      <fileset dir="${dir.lib}">
        <include name="log4j.properties"/>
      </fileset>
    </copy>
  </target>

  <target name="javadocs.package">
    <copy todir="${dir.package}">
      <fileset dir="${basedir}">
        <include name="javadocs/**"/>
      </fileset>
    </copy>
  </target>

  <target name="faq.package">
    <copy todir="${dir.package}">
      <fileset dir="${basedir}/www">
        <include name="FAQ.html"/>
      </fileset>
    </copy>
  </target>

  <target name="releasenotes.package">
    <copy todir="${dir.package}">
      <fileset dir="${basedir}">
        <include name="ReleaseNotes.txt"/>
      </fileset>
    </copy>
  </target>
	
  <target name="licence.package">
    <copy todir="${dir.package}" file="${file.licence}"/>
  </target>

  <target name="example.package">
    <copy todir="${dir.package.example}">
      <fileset dir="${dir.example}">
        <include name="readme.html"/>
        <include name="build.xml"/>
        <include name="readme*"/>
        <include name="spring/**"/>
        <include name="src/**"/>
        <include name="bin/**"/>
        <include name="tutorial/**"/>
        <include name="tools/**"/>
        <include name="docs/**"/>
      </fileset>
    </copy>
    <copy todir="${dir.package.example}/tutorial" file="${dir.example}/log4j.properties"/>
  </target>

  <target name="sql.package">
    <copy todir="${dir.package.sql}">
      <fileset dir="${dir.sql}"/>
    </copy>
  </target>


  <target name="test.package" description="run tests against packaged jars">
    <ant target="test.all" inheritAll="false">
      <reference refid="classpath.test.package" torefid="classpath.test"/>
    </ant>
    <ant target="example.springcheck" inheritAll="false">
      <reference refid="classpath.test.package" torefid="classpath.test"/>
    </ant>
  </target>

  <!-- Main Packaging Targets -->

  <target name="zippedpackage" depends="package, zip" description="create zipped package"/>

  <target name="package" depends="clean.package, lib.package, sql.package, javadocs.package, faq.package, releasenotes.package, test.package, example.package, licence.package"/>


  <!-- Cruise is intended to be the target for continuous builds -->

  <target name="cruise" depends="build.all, zippedpackage" description="target for cruise control to call"/>
   
</project>

