<?xml version="1.0" encoding="UTF-8"?>
<project name="openadaptor" default="retest.all">
  
  <tstamp/>
  <property name="debug" value="true"/>
  <property name="file.licence" value="${basedir}/src/org/openadaptor/util/licence.txt"/>
  <property file="${basedir}/checkout.properties"/>
  <property name="tag" value="untagged"/>

  <property name="dir.stub.classes" value="${basedir}/stub/classes"/>
  <property name="dir.stub.lib" value="${basedir}/stub/lib"/>
  <property name="dir.stub.src" value="${basedir}/stub/src"/>

  <property name="dir.classes" value="${basedir}/classes"/>
  <property name="dir.lib" value="${basedir}/lib"/>
  <property name="dir.src" value="${basedir}/src"/>
  <property name="dir.sql" value="${basedir}/sql"/>

  <property name="dir.buildtools.src" value="${basedir}/buildtools/src"/>
  <property name="dir.buildtools.classes" value="${basedir}/buildtools/classes"/>
  <property name="dir.buildtools.backup" value="${basedir}/buildtools/backup"/>

  <property name="dir.spring.classes" value="${basedir}/spring/classes"/>
  <property name="dir.spring.lib" value="${basedir}/spring/lib"/>
  <property name="dir.spring.src" value="${basedir}/spring/src"/>

  <property name="dir.test.classes" value="${basedir}/test/classes"/>
  <property name="dir.test.lib" value="${basedir}/test/lib"/>
  <property name="dir.test.output" value="${basedir}/test/output"/>

  <property name="dir.test.unit.src" value="${basedir}/test/unit/src"/>
  <property name="dir.test.unit.output" value="${basedir}/test/unit/output"/>

  <property name="dir.test.integration.src" value="${basedir}/test/integration/src"/>
  <property name="dir.test.integration.output" value="${basedir}/test/integration/output"/>

  <property name="dir.test.system.src" value="${basedir}/test/system/src"/>
  <property name="dir.test.system.output" value="${basedir}/test/system/output"/>

  <property name="dir.example" value="${basedir}/example"/>
  <property name="dir.example.classes" value="${basedir}/example/classes"/>
  <property name="dir.example.src" value="${basedir}/example/src"/>

  <mkdir dir="${dir.stub.classes}"/>
  <mkdir dir="${dir.classes}"/>
  <mkdir dir="${dir.spring.classes}"/>

  <mkdir dir="${dir.test.classes}"/>
  <mkdir dir="${dir.test.output}"/>
  <mkdir dir="${dir.test.unit.output}"/>
  <mkdir dir="${dir.test.integration.output}"/>
  <mkdir dir="${dir.test.system.output}"/>

  <mkdir dir="${dir.example.classes}"/>

  <path id="classpath.stub">
    <pathelement path="${dir.stub.classes}"/>
  </path>

  <path id="classpath">
    <pathelement path="${dir.stub.classes}"/>
    <fileset dir="${dir.lib}" includes="**/*.jar,**/*.zip"/>
  </path>

  <path id="classpath.spring">
    <pathelement path="${dir.classes}"/>
    <pathelement path="${dir.stub.classes}"/>
    <fileset dir="${dir.lib}" includes="**/*.jar,**/*.zip"/>
    <fileset dir="${dir.spring.lib}" includes="**/*.jar,**/*.zip"/>
  </path>

  <path id="classpath.test">
    <pathelement path="${dir.classes}"/>
    <pathelement path="${dir.stub.classes}"/>
    <pathelement path="${dir.spring.classes}"/>
    <pathelement path="${dir.test.classes}"/>
    <fileset dir="${dir.lib}" includes="**/*.jar,**/*.zip"/>
    <fileset dir="${dir.spring.lib}" includes="**/*.jar,**/*.zip"/>
    <fileset dir="${dir.test.lib}" includes="**/*.jar,**/*.zip"/>
    <pathelement path="${dir.test.lib}"/>
  </path>

  <path id="classpath.example">
    <pathelement path="${dir.example}"/>
    <pathelement path="${dir.classes}"/>
    <pathelement path="${dir.stub.classes}"/>
    <pathelement path="${dir.spring.classes}"/>
    <pathelement path="${dir.example.classes}"/>
    <fileset dir="${dir.lib}" includes="**/*.jar,**/*.zip"/>
    <fileset dir="${dir.spring.lib}" includes="**/*.jar,**/*.zip"/>
    <fileset dir="${dir.test.lib}" includes="**/*.jar,**/*.zip"/>
  </path>

  <target name="recompile.all" depends="clean.all, compile.all" description="clean and compile all code and tests"/>

  <target name="compile.all" depends="compile.stub, compile, compile.rmi, compile.spring, compile.test, compile.example" description="compile code and tests"/>

  <target name="compile.stub">
    <javac srcdir="${dir.stub.src}" destdir="${dir.stub.classes}" classpathref="classpath.stub"/>
  </target>

  <target name="compile">
    <javac srcdir="${dir.src}" destdir="${dir.classes}" classpathref="classpath" debug="${debug}"/>
    <copy todir="${dir.classes}" overwrite="true">
      <fileset dir="${dir.src}">
        <include name="**/*.properties"/>
        <include name="**/licence.txt"/>
        <include name="**/*.html"/>
        <exclude name="**/package.html"/>
      </fileset>
      <filterset>
        <filter token="BUILDCOMPILER" value="${ant.java.version}"/>
        <filter token="BUILDTIME" value="${DSTAMP}:${TSTAMP}"/>
        <filter token="BUILDTAG" value="${tag}"/>
      </filterset>
    </copy>
  </target>

  <target name="compile.rmi">
    <rmic classname="org.openadaptor.auxil.connector.rmi.RMIReadConnector$$RMIDataProcessor" base="${dir.classes}" sourcebase="${dir.classes}" debug="${debug}"/>
  </target>

  <target name="compile.spring">
    <javac srcdir="${dir.spring.src}" destdir="${dir.spring.classes}" classpathref="classpath.spring" debug="${debug}"/>
    <copy todir="${dir.spring.classes}" overwrite="true">
      <fileset dir="${dir.spring.src}" includes="**/*.xml"/>
    </copy>
  </target>

  <target name="compile.test" depends="compile.test.unit, compile.test.integration, compile.test.system"/>
  
  <target name="compile.test.unit">
    <javac srcdir="${dir.test.unit.src}" destdir="${dir.test.classes}" classpathref="classpath.test" debug="${debug}"/>
    <copy todir="${dir.test.classes}" overwrite="true">
      <fileset dir="${dir.test.unit.src}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.test.integration">
    <javac srcdir="${dir.test.integration.src}" destdir="${dir.test.classes}" classpathref="classpath.test" debug="${debug}"/>
    <copy todir="${dir.test.classes}" overwrite="true">
      <fileset dir="${dir.test.integration.src}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.test.system">
    <javac srcdir="${dir.test.system.src}" destdir="${dir.test.classes}" classpathref="classpath.test" debug="${debug}"/>
    <copy todir="${dir.test.classes}" overwrite="true">
      <fileset dir="${dir.test.system.src}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.example">
    <javac srcdir="${dir.example.src}" destdir="${dir.example.classes}" classpathref="classpath.example" debug="${debug}"/>
  </target>

  <target name="clean.all" depends="clean.stub, clean, clean.spring, clean.test, clean.example, clean.buildtools" description="clean all compile and test output"/>

  <target name="clean.stub">
    <delete>
      <fileset dir="${dir.stub.classes}" includes="**/*"/>
    </delete>
  </target>

  <target name="clean">
    <delete>
      <fileset dir="${dir.classes}" includes="**/*"/>
    </delete>
  </target>

  <target name="clean.spring">
    <delete>
      <fileset dir="${dir.spring.classes}" includes="**/*"/>
    </delete>
  </target>

  <target name="clean.test">
    <delete>
      <fileset dir="${dir.test.classes}" includes="**/*"/>
      <fileset dir="${dir.test.output}" includes="**/*"/>
      <fileset dir="${dir.test.unit.output}" includes="**/*"/>
      <fileset dir="${dir.test.integration.output}" includes="**/*"/>
      <fileset dir="${dir.test.system.output}" includes="**/*"/>
    </delete>
  </target>

  <target name="clean.example">
    <delete>
      <fileset dir="${dir.example.classes}" includes="**/*"/>
    </delete>
  </target>

  <target name="retest.all" depends="recompile.all, test.all" description="clean, recompile and test"/>
  
  <target name="test.all" depends="test.unit, test.integration, test.system" description="Run combined tests cleanly (currently unit, integration and system tests)"/>

  <target name="test.unit" description="run unit tests only">
    <junit printsummary="true" dir="${basedir}">
      <classpath refid="classpath.test"/>
      <formatter type="xml"/>
      <batchtest fork="yes" todir="${dir.test.output}" errorProperty="test.failed" failureProperty="test.failed">
        <fileset dir="${dir.test.unit.src}">
          <include name="**/*TestCase.java"/>
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir="${dir.test.output}">
      <fileset dir="${dir.test.output}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${dir.test.output}"/>
     </junitreport>
     <fail message="Tests failed: check ${dir.test.output}" if="test.failed"/>
  </target>

  <target name="test.integration" description="run integration tests only">
    <junit printsummary="true" dir="${basedir}">
      <classpath refid="classpath.test"/>
      <formatter type="xml"/>
      <batchtest fork="yes" todir="${dir.test.output}" errorProperty="test.failed" failureProperty="test.failed">
        <fileset dir="${dir.test.integration.src}">
          <include name="**/*TestCase.java"/>
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir="${dir.test.output}">
      <fileset dir="${dir.test.output}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${dir.test.output}"/>
     </junitreport>
     <fail message="Tests failed: check ${dir.test.output}" if="test.failed"/>
  </target>

  <target name="test.system" description="run system tests only">
    <junit printsummary="true" dir="${basedir}">
      <classpath refid="classpath.test"/>
      <formatter type="xml"/>
      <batchtest fork="yes" todir="${dir.test.output}" errorProperty="test.failed" failureProperty="test.failed">
        <fileset dir="${dir.test.system.src}">
          <include name="**/*TestCase.java"/>
          <exclude name="**/JBoss*.java"/>
          <exclude name="**/MQ*.java"/>
          <exclude name="**/TIBCO*.java"/>
          <!-- -->
          <!--exclude name="**/WebService*.java"/-->
          <exclude name="**/ReadConnectorWebService*.java"/>
          <!-- -->
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir="${dir.test.output}">
      <fileset dir="${dir.test.output}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${dir.test.output}"/>
     </junitreport>
     <fail message="Tests failed: check ${dir.test.output}" if="test.failed"/>
  </target>

  <target name="compile.buildtools">
    <mkdir dir="${dir.buildtools.classes}"/>
    <javac srcdir="${dir.buildtools.src}" destdir="${dir.buildtools.classes}" classpath="${dir.classes}"/>
  </target>

  <target name="clean.buildtools">
    <delete dir="${dir.buildtools.classes}"/>
  </target>

  <target name="buildtools.taskdef" depends="compile.buildtools">
    <taskdef name="copyright" classname="org.openadaptor.util.ant.CopyrightTask" classpath="${dir.buildtools.classes}:${dir.classes}"/>
    <taskdef name="springcheck" classname="org.openadaptor.util.ant.SpringConfigValidateTask" classpath="${dir.buildtools.classes}"/>
    <taskdef name="jarcopy" classname="org.openadaptor.util.ant.VersionedJarCopyTask" classpath="${dir.buildtools.classes}"/>
  </target>

  <target name="copyright.check" depends="buildtools.taskdef" description="checks copyright notices in code">
    <copyright update="false" backupdir="${dir.buildtools.backup}" copyright="${file.licence}">
      <fileset dir="${dir.src}" includes="**/*.java"/>
      <fileset dir="${dir.spring.src}" includes="**/*.java"/>
      <fileset dir="${dir.example.src}" includes="**/*.java"/>
    </copyright>
  </target>

  <target name="copyright.correct" depends="buildtools.taskdef" description="corrects copyright notices in code">
    <copyright update="true" backupdir="${dir.buildtools.backup}" copyright="${file.licence}">
      <fileset dir="${dir.src}" includes="**/*.java"/>
      <fileset dir="${dir.spring.src}" includes="**/*.java"/>
      <fileset dir="${dir.example.src}" includes="**/*.java"/>
    </copyright>
  </target>
  
  <target name="example.springcheck" depends="buildtools.taskdef" description="checks spring config examples are valid">
    <springcheck classpathref="classpath.test">
      <fileset dir="${dir.example}/spring">
        <include name="**/*.xml"/>
        <exclude name="**/input/*"/>
        <exclude name="**/output/*"/>
        <exclude name="**/mq_*.xml"/>
      </fileset>
    </springcheck>
  </target>
 
  <target name="cruise" depends="retest.all, example.springcheck, copyright.check" description="target for cruise control to call"/>
   
</project>
