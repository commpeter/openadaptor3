<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  $Id$
  $HeadURL$
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
  
  <description><![CDATA[
  This adaptor does the following...
    
    * reads all data in input/delim.txt
    * modifies the fields using javascript
    * outputs to stdout
    
  It is designed to illustrate a simple use of a JavascriptProcessor

  Run it like this...
    
    java org.openadaptor.spring.SpringApplication -config Javascript.xml -bean Adaptor
   
  You need the following in your classpath
  
    lib
    lib/openadaptor.jar
    lib/openadaptor-spring.jar
    lib/openadaptor-depends.jar
    
  writes to stdout
  ]]></description>
  
  <bean id="Adaptor" class="org.openadaptor.core.adaptor.Adaptor"> 
    <description>
      This adaptor is designed to illustrate a simple use of a JavascriptProcessor
        * reads all data in input/delim.txt
        * modifies the fields via javascript
        * outputs to stdout
    </description>
    <property name="messageProcessor">
      <bean class="org.openadaptor.core.router.Pipeline">
        <property name="processors">
          <list>
            <ref bean="reader"/>
            <ref bean="orderedmap"/>
            <ref bean="js_setter"/>
            <ref bean="js_date"/>
            <ref bean="writer"/>
          </list>
        </property>
      </bean>
    </property>
  </bean>
  
  <bean id="reader" class="org.openadaptor.auxil.connector.iostream.reader.FileReadConnector">
    <property name="filename" value="input/delim.txt"/>
  </bean>
  
  <bean id="orderedmap" class="org.openadaptor.auxil.convertor.delimited.DelimitedStringToOrderedMapConvertor">
    <description>Convert to OrderedMap providing fields names</description>
    <property name="fieldNames">
        <list>
            <value>username</value>
            <value>fullname</value>
            <value>uniqueid</value>
            <value>dob</value>
        </list>
    </property>
  </bean>
  
  <bean id="js_setter" class="org.openadaptor.auxil.processor.javascript.JavascriptProcessor">
    <description>
      Simple use of a JavascriptProcessor. Sets a value on the incoming record based. 
    </description>
    <property name="script" value="
      /* scripts can be written across multiple lines and include comments */
      var name    = record.get('fullname');
      var isTerry = name.indexOf('Terry') == 0;

      record.put('isterry',isTerry);
      "/>
  </bean>
 
   <bean id="js_date" class="org.openadaptor.auxil.processor.javascript.JavascriptProcessor">
    <description>
      Contrived use of a JavascriptProcessor to read the year from a field using a regular expression,
      and set a field based on the difference between that year and the current year. 
      It uses new Date().getFullYear() to get the current year (via javascript)
      It extracts the year from the dob field using a regex which would match yyyy-mm-dd, and takes the first match string (yyyy)
    </description>
    <property name="script" value="record.put('approx_age',new Date().getFullYear() - /(\d{4})-(\d{1,2})-(\d{1,2})/.exec(record.get('dob'))[1])"/>
  </bean>
   
  <bean id="writer" class="org.openadaptor.auxil.connector.iostream.writer.FileWriteConnector"/>
  
</beans>  
