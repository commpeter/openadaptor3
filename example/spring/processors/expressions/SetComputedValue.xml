<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!--
  $Header: /cvs/oa3/cookbook/Expressions_OM.xml,v 1.7 2006/11/01 15:08:22 kscully Exp $
  $Revision: 1.7 $
 -->

<beans>
    <description>
        This example illustrates the use of oa3 Expressions (using Ordered Maps)
        Simple example to illustrate using an expression to set value of a field
        based on the values of two others. This example also illustrates the use
        of attribute type maps.

        Data originates: File
        Data processed : XML Records (with typed attributes) converted to Ordered Maps
        Data processed : Various expressions are applied to the maps
        Data terminates: Delimited Text to stdout
    </description>

  <bean id="Adaptor" class="org.oa3.core.adaptor.Adaptor">
    <property name="messageProcessor" ref="Router"/>
  </bean>

  <bean id="Router" class="org.oa3.core.router.Router">
    <property name="routingMap" ref="RoutingMap"/>
  </bean>

  <bean id="RoutingMap" class="org.oa3.core.router.RoutingMap">
    <property name="processMap">
      <map>
        <entry key-ref="XmlInpoint" value-ref="OMConvertor"/>
        <entry key-ref="OMConvertor" value-ref="SetComputedValue"/>
        <entry key-ref="SetComputedValue" value-ref="DelimitedTextConvertor"/>
        <entry key-ref="DelimitedTextConvertor" value-ref="Outpoint"/>
      </map>
    </property>
  </bean>

  <bean id="XmlInpoint" class="org.oa3.auxil.connector.iostream.reader.StreamReadConnector">
    <description>
      Read in an xml document consisting of multiple (child) records.
      Then convert each record into an ordered map.
      (See XML examples for more information on this process)
    </description>
    <property name="streamReader">
      <bean class="org.oa3.auxil.connector.iostream.reader.FileReader">
        <property name="path" value="books.xml"/>
      </bean>
    </property>
  </bean>

  <bean id="OMConvertor" class="org.oa3.auxil.convertor.xml.XmlToOrderedMapConvertor">
    <property name="expression" value="*/*">
      <description>
        (Default is to include the root node.)
        This expression will select all nodes under the root node, excluding the
        root note itself. Useful for our multi-element structure:
        &lt;root&gt;
        &lt;record1&gt;&lt;/record1&gt;
        &lt;record2&gt;&lt;/record2&gt;
        &lt;/root&gt;
      </description>
    </property>
    <property name="omitTopLevelElementTag" value="true">
      <description>
        As we don't want each record to retain it's parent tag,
        to set omitTopLevelElementTag to true.
      </description>
    </property>
    <property name="valueTypeAttributeName" value="type">
      <description>
        If available, this will hint at the attribute type
        Currently supported values are Double, Long, Date and String.
      </description>
    </property>
  </bean>

  <bean id="SetComputedValue" class="org.oa3.auxil.processor.simplerecord.AttributeSetProcessor">
    <description>
      This example sets a record value as the result of an expression.
      It calculates price * quantity and stores it as totalValue
    </description>
    <property name="expression">
      <bean class="org.oa3.auxil.expression.Expression">
        <description>
          The (optional) attributeTypeMap allows specification of type conversions for
          incoming values into appropriate types for expression. Supported types are
          Double,Long,Date and String.
        </description>
        <property name="attributeTypeMap">
          <map>
            <entry key="price" value="Double"/>
            <entry key="quantity" value="Long"/>
          </map>
        </property>
        <property name="expression" value="{price} * {quantity}"/>
      </bean>
    </property>
    <property name="attributeName" value="totalvalue">
      <description>This is attribute where the result of the expression is stored.</description>
    </property>
  </bean>

  <bean id="DelimitedTextConvertor" class="org.oa3.auxil.convertor.delimited.OrderedMapToDelimitedStringConvertor"/>

  <bean id="Outpoint" class="org.oa3.auxil.connector.iostream.writer.StreamWriteConnector">
    <description>Dump the results to a file</description>
    <property name="streamWriter">
      <bean class="org.oa3.auxil.connector.iostream.writer.FileWriter"/>
    </property>
  </bean>

</beans>