<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!--
  $Header: /cvs/oa3/cookbook/Expressions_OM.xml,v 1.7 2006/11/01 15:08:22 kscully Exp $
  $Revision: 1.7 $
 -->

<beans>
    <description>
        This example illustrates the use of oa3 Expressions (using Ordered Maps)
        Simple example to illustrate using an expression to set value of a field
        based on the values of two others. This example also illustrates the use
        of attribute type maps.

        Data originates: File
        Data processed : XML Records converted to Ordered Maps
        Data processed : Various expressions are applied to the maps
        Data terminates: Delimited Text to stdout
    </description>

  <bean id="Adaptor" class="org.oa3.core.adaptor.Adaptor">
    <property name="pipeline">
      <list>
        <ref bean="XmlInpoint"/>
        <ref bean="OMConvertor"/>
        <ref bean="SetComputedValue"/>
        <ref bean="DelimitedTextConvertor"/>
        <ref bean="Outpoint"/>
      </list>
    </property>
  </bean>

  <bean id="XmlInpoint" class="org.oa3.auxil.connector.iostream.reader.StreamReadConnector">
    <description>
      Read in an entire xml document consisting of multiple (child) records.
    </description>
    <property name="streamReader">
      <bean class="org.oa3.auxil.connector.iostream.reader.FileReader">
        <property name="path" value="books.xml"/>
      </bean>
    </property>
  </bean>

  <bean id="OMConvertor" class="org.oa3.auxil.convertor.xml.XmlToOrderedMapConvertor">
    <property name="expression" value="*/*">
      <description>
        Convert each child record in the xml document into an ordered map. Batch the ordered maps.
        One ordered map is created for each child record and added to the batch.
      </description>
    </property>
    <property name="omitTopLevelElementTag" value="true">
      <description>
        As we don't want each record to retain it's parent tag,
        to set omitTopLevelElementTag to true. This allows each
        child to be treated as an independent ordered map.
      </description>
    </property>
  </bean>

  <bean id="SetComputedValue" class="org.oa3.auxil.processor.simplerecord.AttributeSetProcessor">
    <description>
      This example sets a record value as the result of an expression.
      It calculates price * quantity and stores it as totalValue
    </description>
    <property name="expression">
      <bean class="org.oa3.auxil.expression.Expression">
        <description>
          The (optional) attributeTypeMap allows specification of type conversions for
          incoming values into appropriate types for expression. Supported types are
          Double,Long,Date and String.
        </description>
        <property name="attributeTypeMap">
          <map>
            <entry key="price" value="Double"/>
            <entry key="quantity" value="Long"/>
          </map>
        </property>
        <property name="expression" value="{price} * {quantity}"/>
      </bean>
    </property>
    <property name="attributeName" value="totalvalue">
      <description>This is attribute where the result of the expression is stored.</description>
    </property>
  </bean>

  <bean id="DelimitedTextConvertor" class="org.oa3.auxil.convertor.delimited.OrderedMapToDelimitedStringConvertor"/>

  <bean id="Outpoint" class="org.oa3.auxil.connector.iostream.writer.StreamWriteConnector">
    <description>Dump the results to stdout</description>
    <property name="streamWriter">
      <bean class="org.oa3.auxil.connector.iostream.writer.FileWriter"/>
    </property>
  </bean>

</beans>