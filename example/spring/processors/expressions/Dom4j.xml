<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!--
  $Header: /cvs/openadaptor/cookbook/Expressions_dom4j.xml,v 1.3 2006/10/20 14:17:56 higginse Exp $
  $Revision: 1.3 $
 -->

<!--
    This adaptor does the following...

      * reads an xml document from book.xml
      * converts from xml into a Dom4j document.
      * various expressions are applied to the document.
      * converts document to xml
      * writes to stdout

    It is designed to illustrate adding using an expression to compute attribute values.

    Run it like this...

      java org.openadaptor.spring.SpringApplication -config Dom4j.xml -bean Adaptor

    You need the following in your classpath

      lib
      lib/openadaptor.jar
      lib/openadaptor-spring.jar
      lib/openadaptor-depends.jar

    writes to stdout
-->

<beans>
  <description>
    This example illustrates the use of openadaptor Expressions (using XML/dom4j). This example
    manipulates xml directly (using dom4j) referencing the attributes with xpath expressions.
    It represents a single adaptor that applies all the transforms defined in the individual
    orderedmap examples.

    Data originates: File
    Data processed : Single XML Record converted to dom4j document
    Data processed : Various expressions are applied to the document
    Data terminates: stdout
  </description>

  <bean id="Adaptor" class="org.openadaptor.core.adaptor.Adaptor">
    <property name="messageProcessor" ref="Router"/>
  </bean>

  <bean id="Router" class="org.openadaptor.core.router.Router">
    <property name="processMap">
      <map>
        <entry key-ref="XmlReadConnector" value-ref="dom4j_convertor"/>
        <entry key-ref="dom4j_convertor" value-ref="AccessorWrapper"/>
        <entry key-ref="AccessorWrapper" value-ref="SetTotalValue"/>
        <entry key-ref="SetTotalValue" value-ref="AddAuthorTitle"/>
        <entry key-ref="AddAuthorTitle" value-ref="ConditionalQuantify"/>
        <entry key-ref="ConditionalQuantify" value-ref="RemoveRedundantAttributes"/>
        <entry key-ref="RemoveRedundantAttributes" value-ref="Unwrapper"/>
        <entry key-ref="Unwrapper" value-ref="ConvertToXMLText"/>
        <entry key-ref="ConvertToXMLText" value-ref="WriteConnector"/>
      </map>
    </property>
  </bean>

  <bean id="XmlReadConnector" class="org.openadaptor.auxil.connector.iostream.reader.FileReadConnector">
    <description>Read in an entire xml document consisting of multiple child records</description>
    <property name="filename" value="book.xml"/>
    <property name="dataReader">
      <bean class="org.openadaptor.auxil.connector.iostream.reader.string.StringReader"/>
    </property>
  </bean>
  

  <bean id="dom4j_convertor" class="org.openadaptor.thirdparty.dom4j.XmlToDom4jConvertor">
    <description>
      The xml record is converted into a dom4j document.
    </description>
  </bean>

  <bean id="AccessorWrapper" class="org.openadaptor.auxil.convertor.simplerecord.ToSimpleRecordConvertor">
    <property name="simpleRecordAccessor">
      <bean class="org.openadaptor.thirdparty.dom4j.Dom4jSimpleRecordAccessor"/>
    </property>
  </bean>

  <bean id="SetTotalValue" class="org.openadaptor.auxil.processor.simplerecord.AttributeSetProcessor">
    <description>
      This example sets a record value as the result of an expression.
      It calculates price * quantity and stores it as totalValue. Both
      attributes are referenced using xpath expressions.
    </description>
    <property name="expression">
      <bean class="org.openadaptor.auxil.expression.Expression">
        <description>
          The (optional) attributeTypeMap allows specification of type conversions for
          incoming values into appropriate types for expression. Supported types are
          Double,Long,Date and String.
        </description>
        <property name="attributeTypeMap">
          <map>
            <entry key="/book/price" value="Double"/>
            <entry key="/book/quantity" value="Long"/>
          </map>
        </property>
        <property name="expression" value="{/book/price} * {/book/quantity}"/>
      </bean>
    </property>
    <!-- This is attribute where the result of the expression is stored -->
    <property name="attributeName" value="/book/totalvalue"/>
  </bean>

  <bean id="AddAuthorTitle" class="org.openadaptor.auxil.processor.simplerecord.AttributeSetProcessor">
    <description>
      This example is even simpler, do some simple string concatenation.
      As no type mapping is required, the expression can just be provided
      as a string (expressionString instead of expression)
    </description>
    <property name="expressionString" value="'Hon. '+{/book/author}+' the second'"/>
    <property name="attributeName" value="/book/copiedAuthor"/>
  </bean>

  <bean id="ConditionalQuantify" class="org.openadaptor.auxil.processor.simplerecord.ConditionProcessor">
    <description>
      This example illustrates setting an attribute value depending
      on the result of a boolean expression, e.g. the info attribute
      will get 'lots' when quantity is more than 4, or 'few' otherwise.
    </description>
    <property name="ifExpression">
      <bean class="org.openadaptor.auxil.expression.Expression">
        <property name="attributeTypeMap">
          <map>
            <entry key="/book/quantity" value="Long"/>
          </map>
        </property>
        <property name="expression" value="{/book/quantity} gt 3"/>
      </bean>
    </property>
    <property name="thenProcessor">
      <bean class="org.openadaptor.auxil.processor.simplerecord.AttributeSetProcessor">
        <property name="attributeName" value="/book/info"/>
        <property name="expressionString" value="'lots'"/>
      </bean>
    </property>
    <property name="elseProcessor">
      <bean class="org.openadaptor.auxil.processor.simplerecord.AttributeSetProcessor">
        <property name="attributeName" value="/book/info"/>
        <property name="expressionString" value="'few'"/>
      </bean>
    </property>
  </bean>

  <bean id="RemoveRedundantAttributes" class="org.openadaptor.core.processor.ProcessorGroup">
    <description>
      This example removes 2 named attributes.
      Attributes can be removed either by name (attributeName) or using the
      result of an expression to derive the attribute name.
    </description>
    <property name="processors">
      <list>
        <bean class="org.openadaptor.auxil.processor.simplerecord.AttributeRemoveProcessor">
          <property name="expressionString" value="'/book/price'"/>
        </bean>
        <bean class="org.openadaptor.auxil.processor.simplerecord.AttributeRemoveProcessor">
          <property name="attributeName" value="/book/quantity"/>
        </bean>
      </list>
    </property>
  </bean>

  <bean id="Unwrapper" class="org.openadaptor.auxil.convertor.simplerecord.FromSimpleRecordConvertor"/>

  <bean id="ConvertToXMLText" class="org.openadaptor.thirdparty.dom4j.Dom4jToXmlConvertor">
    <property name="prettyPrint" value="true"/> 
  </bean>

  <bean id="WriteConnector" class="org.openadaptor.auxil.connector.iostream.writer.FileWriteConnector"/>

</beans>