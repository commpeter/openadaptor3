<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
 
  <description><![CDATA[
    $Id$
    $HeadURL$
  
    This adaptor does the following...

      * reads an xml document from input/books.xml
      * converts from xml into an OrderedMap
      * remove two specified attributes
      * converts map to a delimited string
      * writes to stdout

    It is designed to illustrate removing an attributes using an AttributeRemoveProcessor

    Run it like this...

      java org.openadaptor.spring.SpringAdaptor -config RemoveAttributes.xml -bean Adaptor

    You need the following in your classpath

      lib
      lib/openadaptor.jar
      lib/openadaptor-spring.jar
      lib/openadaptor-depends.jar

    writes to stdout

        This example illustrates the use of openadaptor Expressions (using Ordered Maps)
        Simple example that illustrates removing specific attributes.

        Data originates: File
        Data processed : XML Records converted to Ordered Maps
        Data processed : Remove two specified attributes.
        Data terminates: Delimited Text to stdout
  ]]></description>

  <bean id="Adaptor" class="org.openadaptor.core.adaptor.Adaptor">
    <property name="messageProcessor">
      <bean class="org.openadaptor.core.router.Pipeline">
        <property name="processors">
          <list>
            <ref bean="XmlReadConnector"/>
            <ref bean="OMConvertor"/>
            <ref bean="RemoveAttributes"/>
            <ref bean="DelimitedTextConvertor"/>
            <ref bean="WriteConnector"/>
          </list>
        </property>
      </bean>
    </property>
  </bean>

  <bean id="XmlReadConnector" class="org.openadaptor.auxil.connector.iostream.reader.FileReadConnector">
    <description>Read in an entire xml document consisting of multiple child records</description>
    <property name="filename" value="input/books.xml"/>
    <property name="dataReader">
      <bean class="org.openadaptor.auxil.connector.iostream.reader.string.StringReader"/>
    </property>
  </bean>
  
  <bean id="OMConvertor" class="org.openadaptor.auxil.convertor.xml.XmlToOrderedMapConvertor">
    <property name="expression" value="*/*">
      <description>
        Convert each child record in the xml document into an ordered map. Batch the ordered maps.
        One ordered map is created for each child record and added to the batch.
      </description>
    </property>
    <property name="omitTopLevelElementTag" value="true">
      <description>
        As we don't want each record to retain it's parent tag,
        to set omitTopLevelElementTag to true. This allows each
        child to be treated as an independent ordered map.
      </description>
    </property>
  </bean>

  <bean id="RemoveAttributes" class="org.openadaptor.core.processor.ProcessorGroup">
    <description>
      This example removes 2 named attributes.
      Attributes can be removed either by name (attributeName) or using the
      result of an expression to derive the attribute name.
    </description>
    <property name="processors">
      <list>
        <bean class="org.openadaptor.auxil.processor.simplerecord.AttributeRemoveProcessor">
          <!-- Doesn't remove anything here as no attribute name matches a price value. -->
          <property name="expressionString" value="{price}"/>
        </bean>
        <bean class="org.openadaptor.auxil.processor.simplerecord.AttributeRemoveProcessor">
          <property name="attributeName" value="quantity"/>
        </bean>
      </list>
    </property>
  </bean>

  <bean id="DelimitedTextConvertor" class="org.openadaptor.auxil.convertor.delimited.OrderedMapToDelimitedStringConvertor"/>

  <bean id="WriteConnector" class="org.openadaptor.auxil.connector.iostream.writer.FileWriteConnector"/>

</beans>
