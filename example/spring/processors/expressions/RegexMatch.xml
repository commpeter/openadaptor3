<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!--
  $Header: /cvs/openadaptor/cookbook/Expressions_OM.xml,v 1.7 2006/11/01 15:08:22 kscully Exp $
  $Revision: 1.7 $
 -->

<beans>
    <description>
        This example illustrates the use of openadaptor Expressions (using Ordered Maps).
        Simple example to add attribute with value conditional on matching a regex expression
        with the value of another.
        Data originates: File
        Data processed : XML Records (converted to Ordered Maps
        Data processed : Add attribute 'match'.
        Data terminates: Delimited Text to stdout
    </description>

  <bean id="Adaptor" class="org.openadaptor.core.adaptor.Adaptor">
    <property name="messageProcessor">
      <bean class="org.openadaptor.core.router.Pipeline">
        <property name="processors">
          <list>
            <ref bean="XmlReadConnector"/>
            <ref bean="OMConvertor"/>
            <ref bean="RegexMatch"/>
            <ref bean="DelimitedTextConvertor"/>
            <ref bean="WriteConnector"/>
          </list>
        </property>
      </bean>
    </property>
  </bean>

  <bean id="XmlReadConnector" class="org.openadaptor.auxil.connector.iostream.reader.StreamReadConnector">
    <description>
      Read in an entire xml document consisting of multiple (child) records.
    </description>
    <property name="streamReader">
      <bean class="org.openadaptor.auxil.connector.iostream.reader.FileReader">
        <property name="path" value="books.xml"/>
      </bean>
    </property>
  </bean>

  <bean id="OMConvertor" class="org.openadaptor.auxil.convertor.xml.XmlToOrderedMapConvertor">
    <property name="expression" value="*/*">
      <description>
        Convert each child record in the xml document into an ordered map. Batch the ordered maps.
        One ordered map is created for each child record and added to the batch.
      </description>
    </property>
    <property name="omitTopLevelElementTag" value="true">
      <description>
        As we don't want each record to retain it's parent tag,
        to set omitTopLevelElementTag to true. This allows each
        child to be treated as an independent ordered map.
      </description>
    </property>
  </bean>

  <bean id="RegexMatch" class="org.openadaptor.auxil.processor.simplerecord.ConditionProcessor">
    <description>
      This example illustrates setting an attribute value depending
      on the result of matching a regular expression, e.g. the match attribute
      will get 'matches' when title matches the regex below, or 'nomatch' otherwise.
      It illustrates the use of the expression 'matches' function.
    </description>
    <property name="ifExpressionString" value="matches( {title}, '^Cosmic.*$' )"/>
    <property name="thenProcessor">
      <bean class="org.openadaptor.auxil.processor.simplerecord.AttributeSetProcessor">
        <property name="attributeName" value="match"/>
        <property name="expressionString" value="'matches'"/>
      </bean>
    </property>
    <property name="elseProcessor">
      <bean class="org.openadaptor.auxil.processor.simplerecord.AttributeSetProcessor">
        <property name="attributeName" value="match"/>
        <property name="expressionString" value="'nomatch'"/>
      </bean>
    </property>
  </bean>

  <bean id="DelimitedTextConvertor" class="org.openadaptor.auxil.convertor.delimited.OrderedMapToDelimitedStringConvertor"/>

  <bean id="WriteConnector" class="org.openadaptor.auxil.connector.iostream.writer.StreamWriteConnector">
    <description>Dump the results to a stdout</description>
    <property name="streamWriter">
      <bean class="org.openadaptor.auxil.connector.iostream.writer.FileWriter"/>
    </property>
  </bean>

</beans>
