<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
    This (contrived) adaptor does the following...
    
      * reads lines from stdin
      * converts delmited input into a map
      * converts map to xml
      * writes to stdout
    
    It is designed to illustrate the basic structure of an adaptor router configuration.
    The previous example sets an adaptor pipeline property, to the ordered list of components
    that make up the adaptor. In this example we show an equivalent adaptor that that defines
    the linkage between the component using a RoutingMap and a Router. Explicitly using the
    RoutingMap and Router allows more sophisticated configurations such as
  
    Branching - the output of a component is routed to multiple processors
    Exception Management - specific exceptions can be trapped at any point in the processing
                           (see exceptions2 example).
  
    Run it like this...
    
      java org.openadaptor.spring.SpringApplication -config router.xml -bean Adaptor
    
    You need the following in your classpath
  
      lib
      lib/openadaptor.jar
      lib/openadaptor-spring.jar
      lib/openadaptor-depends.jar
     
    Once it is running it will wait for command line input
    
    type something like this...
    
      hello world
    
    ...and you should see it converted to something like this...
  
      <?xml version="1.0" encoding="ISO-8859-1"?>
      <record><field>hello world</field></record>
    
-->

<beans>
  
  <!-- This is the bean that actually gets run -->
  <bean id="Adaptor" class="org.openadaptor.core.adaptor.Adaptor">
    <property name="messageProcessor" ref="Router"/>
  </bean>
  
  <!-- The adaptor delegates it's message processing to a router. 
       The router uses this mapping to define the "processing pipeline" -->
  <bean id="Router" class="org.openadaptor.core.router.Router">
    <property name="processMap">
      <map>
        <entry key-ref="Reader" value-ref="MapConverter"/>
        <entry key-ref="MapConverter" value-ref="XmlConverter"/>
        <entry key-ref="XmlConverter" value-ref="Writer"/>
      </map>
    </property>
  </bean>

  <!-- This is a read connector, it reads records from a stream (stdin) -->
  <bean id="Reader" class="org.openadaptor.auxil.connector.iostream.reader.StreamReadConnector">
    <property name="streamReader">
      <bean class="org.openadaptor.auxil.connector.iostream.reader.FileReader"/>
    </property>
    <property name="recordReader">
      <bean class="org.openadaptor.auxil.connector.iostream.reader.StringRecordReader"/>
    </property>
  </bean>
  
  <!-- This is a processor that converts delimited strings into an ordered map -->
  <bean id="MapConverter" class="org.openadaptor.auxil.convertor.delimited.DelimitedStringToOrderedMapConvertor">
    <property name="fieldNames">
      <list>
        <value>field</value>
      </list>
    </property>
  </bean>
  
  <!-- This is a processor that converts an ordered map into an xml string -->
  <bean id="XmlConverter" class="org.openadaptor.auxil.convertor.xml.OrderedMapToXmlConvertor">
    <property name="rootElementTag" value="record"/>
  </bean>
  
  <!-- This is a write connector that outputs the data to a stream (stdout) -->
  <bean id="Writer" class="org.openadaptor.auxil.connector.iostream.writer.StreamWriteConnector">
    <property name="streamWriter">
      <bean class="org.openadaptor.auxil.connector.iostream.writer.FileWriter"/>
    </property>
  </bean>
  
</beans>