<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  $Id$
  $HeadURL$
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
  <description><![CDATA[    
  
  This adaptor does the following...
    
    * reads data from stdin
    * writes the data via a stored procedure call
    
  It is designed to illustrate the basic structure of an adaptor that writes to a database.

  Run it like this...
    
    java org.openadaptor.spring.SpringAdaptor -config storedprocwriter.xml -bean Adaptor -props db.props
    
  You need the following in your classpath
  
    lib
    lib/openadaptor.jar
    lib/openadaptor-spring.jar
    lib/openadaptor-depends.jar
    <database jar>
    
  once running any data that read from std input is written into the test table.
  
   ]]></description>
  
  <bean id="Adaptor" class="org.openadaptor.core.adaptor.Adaptor">
    <property name="messageProcessor">
     <bean class="org.openadaptor.core.router.Router">
       <description>
         This creates the simple router: Reader -> MapConverter -> Writer.
       </description>
       <property name="processors">
         <list>
           <ref bean="Reader"/>
           <ref bean="MapConverter"/>
           <ref bean="ScriptProcessor"/>
           <ref bean="Writer"/>
         </list>
       </property>
     </bean>
    </property>
  </bean>
  
  <bean id="Reader" class="org.openadaptor.auxil.connector.iostream.reader.FileReadConnector">
   <property name="filename" value="input/input.txt"/>
   <property name="batchSize" value="10"/>
  </bean>
  
  <bean id="MapConverter" class="org.openadaptor.auxil.convertor.delimited.DelimitedStringToOrderedMapConvertor">
    <description>Converts input into an ordered map with two fields.</description>
    <property name="fieldNames">
      <list>
        <value>id</value>
        <value>name</value>
      </list>
    </property>
  </bean>
  
  <bean id="ScriptProcessor" class="org.openadaptor.auxil.processor.script.ScriptProcessor">
    <description>
      This will just change the id field from a String (as parsed) into an int.
      Default dataBinding to record is 'data'.
    </description>
    <property name="language" value="js"/>
    <property name="script">
      <value>
        data.put('id',data.get('id')*1); //This will make it an int :-)
      </value>
    </property>
  </bean>
 
  <!-- 
    The connection parameters referenced here should be defined in a separate properties file 
      and referenced on the command line via -props <path-to-props-file> 
    -->
  <bean id="JdbcConnection" class="org.openadaptor.auxil.connector.jdbc.JDBCConnection">
    <description>This defines jdbc connection.</description>
    <property name="driver" value="${sybase.driver}"/>
    <property name="url" value="${sybase.url}"/>
    <property name="username" value="${sybase.username}"/>
    <property name="password" value="${sybase.password}"/>
  </bean>

  <bean id="Writer" class="org.openadaptor.auxil.connector.jdbc.writer.NewJDBCWriteConnector">
    <description>Writer which inserts data into test table.</description>
    <property name="jdbcConnection" ref="JdbcConnection"/>
    <property name="writer">
      <bean class="org.openadaptor.auxil.connector.jdbc.writer.MapTableWriter">
        <property name="tableName" value="WriterExample"/>
      </bean>
    </property>

  </bean>

</beans>