<?xml version="1.0" encoding="UTF-8"?>
<!--
    [[
    Copyright (C) 2006 The Software Conservancy as Trustee. All rights
    reserved.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    Nothing in this notice shall be deemed to grant any rights to
    trademarks, copyrights, patents, trade secrets or any other intellectual
    property of the licensor or any contributor except as expressly stated
    herein. No patent license is granted separate from the Software, for
    code that you delete from the Software, or for combinations of the
    Software with other software or hardware.
    ]]

    $Header: /u1/sourcecast/data/ccvs/repository/oa3/cookbook/xslt/oa3toDot.xsl,v 1.13 2006/11/09 12:11:12 shirea Exp $

    @author Eddy Higgins
    @author Andrew Shire

    Converts an OA3 XML config file (a Spring config file) into GraphViz "dot" format.
    We wanted to produce a node map with HTML links to the detailed
    documentation we generate using "beans.xsl".
    The "dot" format file can be processed by GraphViz to produce a GIF and image map pair,
    which we can then expose through HTML pages generated by "nodemap.xsl" and "allnodesmaps.xsl".

    With thanks to Mike Thomas (http://www.samoht.com) for making available a simple
    XSLT stylesheet that converts a Spring bean config file into a Graphviz/Dot input file.
    He showed how well it could work and we used his work as the inspiration for this file.
  -->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:beans="http://www.springframework.org/schema/beans">
    <xsl:output method="text"/>

    <xsl:variable name="exampleName" select="substring-before(substring-after(beans:beans/beans:description|comment(),'HeadURL: https://www.openadaptor.org/svn/openadaptor3/trunk/example/spring/'),'.xml ')"/>
    <xsl:variable name="graphName" select="concat('Map_', translate($exampleName, '/', '_'))"/>

    <xsl:template match="/">
        digraph <xsl:value-of select="$graphName"/> {
        graph [ ];
        node  [ shape=rectangle, style=filled, fontname=Helvetica, fontsize="10", color=pink ];
        edge  [ fontname=Helvetica, fontsize="9" ];
        <xsl:apply-templates select="beans:beans/beans:bean"/>
        }
    </xsl:template>


    <xsl:template match="beans:bean">
        <xsl:variable name="srcNode" select="concat(@id,@beans:name)"/>

        <!-- Name of node ("node id"): -->
        <xsl:text>"</xsl:text>
        <xsl:value-of select="translate($srcNode, '-', '_')"/>
        <xsl:text>"</xsl:text>

        <!-- Begin attribute list for node: -->
        <xsl:text> [ </xsl:text>

        <!-- Node label defined as an HTML fragment (hence embedded in angle brackets): -->
        <xsl:text>label= &lt;</xsl:text>
        <xsl:text>&lt;table&gt;&lt;tr&gt;&lt;td&gt;</xsl:text>
        <xsl:value-of select="$srcNode"/>
        <xsl:text>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;</xsl:text>
        <xsl:value-of select="@beans:class"/>
        <xsl:if test="@beans:factory-bean">
            <xsl:text>Factory: </xsl:text>
            <xsl:value-of select="@beans:factory-bean"/>
        </xsl:if>
        <xsl:text>&lt;/td&gt;&lt;/tr&gt;</xsl:text>
        <xsl:text>&lt;/table&gt;</xsl:text>
        <xsl:text>&gt; </xsl:text>

        <!-- Node URL: -->
        <xsl:if test="string-length($srcNode) > 0">
            <xsl:text>URL="</xsl:text>
            <xsl:value-of select="concat('../', $exampleName, '.html#', $srcNode)"/>
            <xsl:text>", </xsl:text>
            <xsl:text>tooltip="</xsl:text>
            <xsl:value-of select="$srcNode"/>
            <xsl:text>", </xsl:text>
        </xsl:if>

        <!-- Node colour according to node type: -->
        <xsl:choose>
            <!-- Transport and Factories: -->
            <xsl:when test="contains($srcNode, 'transport')">color=lightgray</xsl:when>
            <xsl:when test="contains(@beans:class, 'Factory')">color=lightgray</xsl:when>
            <xsl:when test="@beans:factory-bean">color=lightgray</xsl:when>

            <!-- Standard OA3 classes: -->
            <xsl:when test="contains(@class, 'org.oa3')">
                <xsl:choose>
                    <xsl:when test="contains(@beans:class, 'org.oa3.node.Node')">color=LightCyan</xsl:when>
                    <xsl:when test="contains(@beans:class, 'org.oa3.node.BufferNode')">color=LightCyan</xsl:when>
                    <xsl:when test="contains(@beans:class, 'Proxy')">color=LightCyan</xsl:when>
                    <xsl:when test="contains(@beans:class, 'org.oa3.node.AdaptorInpoint')">color=YellowGreen</xsl:when>
                    <xsl:when test="contains(@beans:class, 'org.oa3.node.AdaptorOutpoint')">color=YellowGreen</xsl:when>
                    <xsl:otherwise>color=LightBlue</xsl:otherwise>
                </xsl:choose>
            </xsl:when>

            <!-- Standard Spring classes: -->
            <xsl:when test="contains(@beans:class, 'org.springframework')">
                <xsl:choose>
                    <xsl:when test="contains(@beans:class, 'interceptor')">color=Orange</xsl:when>
                    <xsl:otherwise>color=Wheat</xsl:otherwise>
                </xsl:choose>
            </xsl:when>

            <!-- Extension classes: -->
            <xsl:otherwise>color=Pink</xsl:otherwise>
        </xsl:choose>

        <!-- End attribute list for node: -->
        <xsl:text> ];
        </xsl:text>

        <xsl:call-template name="calculateEdges">
            <xsl:with-param name="srcNode" select="$srcNode"/>
        </xsl:call-template>
    </xsl:template>



    <xsl:template name="calculateEdges">
        <xsl:param name="srcNode"          select="concat(ancestor::beans:bean[@id|@beans:name]/@id,ancestor::beans:bean[@id|@beans:name]/@beans:name)"/>

        <xsl:for-each select="beans:property">
            <xsl:choose>
                <!-- Add routing edge definitions for this node: -->
                <xsl:when test="@beans:name='chainedNodes'">
                    <xsl:for-each select="beans:list">
                        <xsl:call-template name="routingEdge">
                            <xsl:with-param name="srcNode"          select="$srcNode"/>
                            <xsl:with-param name="edgeTooltipLabel" select="'chainedNodes'"/>
                            <xsl:with-param name="edgeColor"        select="'black'"/>
                            <xsl:with-param name="edgeLayoutWeight" select="1.0"/>
                            <xsl:with-param name="arrowHeadShape"   select="'normal'"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <!-- Apply bean rules to inline beans in routing properties (treat as top-level beans) -->
                    <xsl:apply-templates select="beans:list/beans:bean"/>
                </xsl:when>

                <xsl:when test="@beans:name='discardChainedNodes'">
                    <xsl:for-each select="beans:list">
                        <xsl:call-template name="routingEdge">
                            <xsl:with-param name="srcNode"          select="$srcNode"/>
                            <xsl:with-param name="edgeLabel"        select="'Discard'"/>
                            <xsl:with-param name="edgeTooltipLabel" select="'discardChainedNodes'"/>
                            <xsl:with-param name="edgeColor"        select="'blue'"/>
                            <xsl:with-param name="edgeLayoutWeight" select="0.9"/>
                            <xsl:with-param name="arrowHeadShape"   select="'vee'"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <!-- Apply bean rules to inline beans in routing properties (treat as top-level beans) -->
                    <xsl:apply-templates select="beans:list/beans:bean"/>
                </xsl:when>

                <!-- Add exception edge definitions for this node: -->
                <xsl:when test="@beans:name='staticExceptionRouting'">
                    <xsl:for-each select="beans:map/beans:entry">
                        <xsl:call-template name="exceptionEdge">
                            <xsl:with-param name="srcNode"          select="$srcNode"/>
                            <xsl:with-param name="edgeTooltipLabel" select="'staticExceptionRouting'"/>
                            <xsl:with-param name="arrowTailShape"   select="'box'"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <!-- Apply bean rules to inline beans in routing properties (treat as top-level beans) -->
                    <xsl:apply-templates select="beans:map/beans:entry/beans:value/beans:bean"/>
                </xsl:when>

                <xsl:when test="@beans:name='dynamicExceptionRouting'">
                    <xsl:for-each select="beans:map/beans:entry">
                        <xsl:call-template name="exceptionEdge">
                            <xsl:with-param name="srcNode"          select="$srcNode"/>
                            <xsl:with-param name="edgeTooltipLabel" select="'dynamicExceptionRouting'"/>
                            <xsl:with-param name="arrowTailShape"   select="'dot'"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <!-- Apply bean rules to inline beans in routing properties (treat as top-level beans) -->
                    <xsl:apply-templates select="beans:map/beans:entry/beans:value/beans:bean"/>
                </xsl:when>

                <!-- Add helper bean reference edge definitions for this node: -->
                <xsl:otherwise>
                    <xsl:for-each select="@beans:ref | beans:ref[@beans:bean]/@beans:bean | @beans:factory-bean">
                        <xsl:call-template name="referenceEdge">
                            <xsl:with-param name="srcNode" select="$srcNode"/>
                        </xsl:call-template>
                    </xsl:for-each>

                    <xsl:for-each select="beans:list/beans:ref/@beans:bean | beans:map/beans:entry/beans:key/beans:ref/@beans:bean | beans:map/beans:entry/@beans:key-ref | beans:map/beans:entry/beans:value/beans:ref/@beans:bean | beans:map/beans:entry/@beans:value-ref">
                        <xsl:call-template name="referenceEdge">
                            <xsl:with-param name="srcNode" select="$srcNode"/>
                        </xsl:call-template>
                    </xsl:for-each>

                    <!-- Apply edge rules to child beans (that are NOT inline beans in routing properties) -->
                    <xsl:for-each select="beans:bean | beans:list/beans:bean | beans:map/beans:entry/beans:key/beans:bean | beans:map/beans:entry/beans:value/beans:bean">
                        <xsl:call-template name="calculateEdges">
                            <xsl:with-param name="srcNode"  select="$srcNode"/>
                        </xsl:call-template>
                    </xsl:for-each>
                </xsl:otherwise>
            </xsl:choose>

        </xsl:for-each>

        <!-- Check for factory bean reference: -->
        <xsl:for-each select="@beans:factory-bean">
            <xsl:call-template name="referenceEdge">
                <xsl:with-param name="srcNode"          select="$srcNode"/>
            </xsl:call-template>
        </xsl:for-each>

    </xsl:template>


    <!-- Chained node routing: -->
    <xsl:template name="routingEdge">
        <!-- Parameters (and default values for them): -->
        <xsl:param name="srcNode"          select="concat(ancestor::beans:bean[@id|@beans:name]/@id,ancestor::beans:bean[@id|@beans:name]/@beans:name)"/>
        <xsl:param name="edgeLabel"        select="''"/>
        <xsl:param name="edgeTooltipLabel" select="''"/>
        <xsl:param name="edgeColor"        select="'black'"/>
        <xsl:param name="edgeStyle"        select="'solid'"/>
        <xsl:param name="edgeLayoutWeight" select="1.0"/>
        <xsl:param name="arrowHeadShape"   select="'normal'"/>

        <xsl:for-each select="*">
            <xsl:call-template name="genericEdge">
                <xsl:with-param name="srcNode" select="$srcNode"/>
                <xsl:with-param name="destNode">
                    <xsl:value-of select="@beans:bean"/>  <!-- list item is a bean reference (normal) -->
                    <xsl:value-of select="concat(@id,@beans:name)"/>    <!-- list item is an inline bean (unusual) -->
                </xsl:with-param>
                <xsl:with-param name="edgeTooltipLabel" select="concat($srcNode, '.', $edgeTooltipLabel)"/>
                <xsl:with-param name="edgeLabel"        select="$edgeLabel"/>
                <xsl:with-param name="edgeColor"        select="$edgeColor"/>
                <xsl:with-param name="edgeStyle"        select="$edgeStyle"/>
                <xsl:with-param name="edgeLayoutWeight" select="$edgeLayoutWeight"/>
                <xsl:with-param name="arrowHeadShape"   select="$arrowHeadShape"/>
                <xsl:with-param name="arrowTailShape"   select="'none'"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>


    <!-- Exception routing: -->
    <xsl:template name="exceptionEdge">
        <!-- Parameters (and default values for them): -->
        <xsl:param name="srcNode"          select="concat(ancestor::beans:bean[@id|@beans:name]/@id,ancestor::beans:bean[@id|@beans:name]/@beans:name)"/>
        <xsl:param name="edgeTooltipLabel" select="''"/>
        <xsl:param name="edgeStyle"        select="'solid'"/>
        <xsl:param name="arrowTailShape"   select="'none'"/>

        <xsl:call-template name="genericEdge">
            <xsl:with-param name="srcNode" select="$srcNode"/>
            <xsl:with-param name="destNode">
                <xsl:value-of select="@beans:value-ref"/> <!-- list item is a bean reference (normal) -->
                <xsl:value-of select="@beans:bean-ref"/>  <!-- list item is a bean reference (normal) -->
                <xsl:value-of select="beans:ref/@beans:bean"/>  <!-- list item is a bean reference (normal) -->
                <xsl:value-of select="concat(beans:value/@id, beans:value/@beans:name)"/>  <!-- list item is an inline bean (unusual) -->
            </xsl:with-param>
            <xsl:with-param name="edgeLabel">
                <xsl:value-of select="@beans:key"/>
                <xsl:value-of select="beans:key/@beans:value"/>
                <xsl:value-of select="beans:key/beans:value"/>
            </xsl:with-param>
            <xsl:with-param name="edgeTooltipLabel" select="concat($srcNode, '.', $edgeTooltipLabel)"/>
            <xsl:with-param name="edgeColor"        select="'red'"/>
            <xsl:with-param name="edgeStyle"        select="$edgeStyle"/>
            <xsl:with-param name="edgeLayoutWeight" select="0.5"/>
            <xsl:with-param name="arrowHeadShape"   select="'vee'"/>
            <xsl:with-param name="arrowTailShape"   select="$arrowTailShape"/>
        </xsl:call-template>
    </xsl:template>


    <!-- Reference edges: -->
    <xsl:template name="referenceEdge">
        <!-- Parameters (and default values for them): -->
        <xsl:param name="srcNode"          select="concat(ancestor::beans:bean[@id|@beans:name]/@id,ancestor::beans:bean[@id|@beans:name]/@beans:name)"/>

        <xsl:variable name="compoundPropertyName">
            <xsl:for-each select="ancestor-or-self::beans:property[@beans:name]">
                <xsl:text>.</xsl:text>
                <xsl:value-of select="@beans:name"/>
            </xsl:for-each>
            <xsl:if test=". = ../@beans:factory-bean">
                <xsl:text>@beans:factory-bean</xsl:text>
            </xsl:if>
        </xsl:variable>

        <!-- Proxy components use "target" and "targetNode" properties: typically these relate to dataflow: -->
        <xsl:variable name="style">
            <xsl:variable name="len" select="string-length($compoundPropertyName)"/>
            <xsl:choose>
                <xsl:when test="($len >= 7) and contains(substring($compoundPropertyName, $len - 6, 7), '.target')">solid</xsl:when>
                <xsl:when test="($len >= 11) and contains(substring($compoundPropertyName, $len - 10, 11), '.targetNode')">solid</xsl:when>
                <xsl:otherwise>dashed</xsl:otherwise>
            </xsl:choose>
        </xsl:variable>

        <xsl:call-template name="genericEdge">
            <xsl:with-param name="srcNode"          select="$srcNode"/>
            <xsl:with-param name="destNode"         select="."/>
            <xsl:with-param name="edgeLabel"        select="'Ref'"/>
            <xsl:with-param name="edgeTooltipLabel" select="concat($srcNode, $compoundPropertyName)"/>
            <xsl:with-param name="edgeColor"        select="'black'"/>
            <xsl:with-param name="edgeStyle"        select="$style"/>
            <xsl:with-param name="edgeLayoutWeight" select="0.3"/>
            <xsl:with-param name="arrowHeadShape"   select="'vee'"/>
            <xsl:with-param name="arrowTailShape"   select="'odot'"/>
        </xsl:call-template>
    </xsl:template>


    <!-- Generic edges (routing and references): -->
    <xsl:template name="genericEdge">
        <!-- Parameters (and default values for them): -->
        <xsl:param name="srcNode" select="concat(ancestor::beans:bean[@id|@beans:name]/@id,ancestor::beans:bean[@id|@beans:name]/@beans:name)"/>
        <xsl:param name="destNode">
            <xsl:value-of select="beans:ref/@beans:bean"/>
            <xsl:value-of select="concat(@id,@beans:name)"/>
        </xsl:param>
        <xsl:param name="edgeLabel"        select="''"/>
        <xsl:param name="edgeTooltipLabel" select="$srcNode"/>
        <xsl:param name="edgeColor"        select="'black'"/>
        <xsl:param name="edgeStyle"        select="'solid'"/>
        <xsl:param name="edgeLayoutWeight" select="1.0"/>
        <xsl:param name="arrowHeadShape"   select="'normal'"/>
        <xsl:param name="arrowTailShape"   select="'none'"/>
        <xsl:param name="layoutConstraint" select="true()"/>

        <!-- Define src/dest (and so direction) of edge: -->
        <xsl:text>"</xsl:text>
        <xsl:value-of select="translate($srcNode, '-', '_')"/>
        <xsl:text>"</xsl:text>
        <xsl:text> -&gt; </xsl:text>
        <xsl:text>"</xsl:text>
        <xsl:value-of select="translate($destNode, '-', '_')"/>
        <xsl:text>"</xsl:text>

        <!-- Begin attribute list for edge: -->
        <xsl:text> [ </xsl:text>

        <xsl:if test="$edgeLabel != ''">
            <xsl:text>label=&lt;</xsl:text>
            <xsl:value-of select="$edgeLabel"/>
            <xsl:text>&gt;, </xsl:text>
            <xsl:text>fontcolor=</xsl:text>
            <xsl:value-of select="$edgeColor"/>
            <xsl:text>, </xsl:text>
        </xsl:if>

        <!-- Edge URL: -->
        <xsl:if test="$srcNode != ''">
            <xsl:text>URL="</xsl:text>
            <xsl:value-of select="concat('../', $exampleName, '.html#', $srcNode)"/>
            <xsl:text>", </xsl:text>
            <xsl:text>tooltip="</xsl:text>
            <xsl:value-of select="$edgeTooltipLabel"/>
            <xsl:text>", </xsl:text>
        </xsl:if>

        <xsl:text>color=</xsl:text>
        <xsl:value-of select="$edgeColor"/>
        <xsl:text>, </xsl:text>

        <xsl:text>style=</xsl:text>
        <xsl:value-of select="$edgeStyle"/>
        <xsl:text>, </xsl:text>

        <xsl:text>weight=</xsl:text>
        <xsl:value-of select="$edgeLayoutWeight"/>
        <xsl:text>, </xsl:text>

        <xsl:text>arrowhead=</xsl:text>
        <xsl:value-of select="$arrowHeadShape"/>
        <xsl:text>, </xsl:text>

        <xsl:text>arrowtail=</xsl:text>
        <xsl:value-of select="$arrowTailShape"/>
        <xsl:text>, </xsl:text>

        <xsl:text>constraint=</xsl:text>
        <xsl:value-of select="$layoutConstraint"/>
        <xsl:text>, </xsl:text>

        <!-- End attribute list for edge: -->
        <xsl:text> ];
        </xsl:text>
    </xsl:template>

</xsl:stylesheet>
