/*
 Copyright (C) 2001 - 2007 The Software Conservancy as Trustee. All rights reserved.

 Permission is hereby granted, free of charge, to any person obtaining a copy of
 this software and associated documentation files (the "Software"), to deal in the
 Software without restriction, including without limitation the rights to use, copy,
 modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
 and to permit persons to whom the Software is furnished to do so, subject to the
 following conditions:

 The above copyright notice and this permission notice shall be included in all 
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 Nothing in this notice shall be deemed to grant any rights to trademarks, copyrights,
 patents, trade secrets or any other intellectual property of the licensor or any
 contributor except as expressly stated herein. No patent license is granted separate
 from the Software, for code that you delete from the Software, or for combinations
 of the Software with other software or hardware.
 */

package org.openadaptor.core.exception;

import java.net.MalformedURLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.List;

//import org.apache.commons.logging.Log;
//import org.apache.commons.logging.LogFactory;
import org.openadaptor.auxil.connector.jdbc.JDBCConnectionTestCase;
import org.openadaptor.core.IReadConnector;
import org.openadaptor.core.IWriteConnector;
import org.openadaptor.spring.SpringAdaptor;
import org.openadaptor.util.ResourceUtil;
import org.springframework.beans.BeansException;
//import org.springframework.beans.factory.ListableBeanFactory;
//import org.springframework.beans.factory.xml.XmlBeanFactory;
import org.springframework.core.io.UrlResource;


/**
 * System tests for {@link HospitalDBWriter}.
 * 
 * @author Kris Lachor
 */
public class HospitalDBWriterTestCase extends JDBCConnectionTestCase {
  
//  private static final Log logger = LogFactory.getLog(HospitalDBWriterTestCase.class);
  
  private String schema = "CREATE MEMORY TABLE ERROR_LOG(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,TIMESTAMP CHAR(32),EXCEPTION_CLASS_NAME CHAR(128),ORIGINATING_COMPONENT CHAR(128),DATA CHAR(256),FIXED BOOLEAN,REPROCESSED BOOLEAN)";
  
  private static String SELECT_ALL_ERRORS_SQL = "SELECT * FROM ERROR_LOG";
  
  protected static final String RESOURCE_LOCATION = "test/system/src/";
  
  protected static final String CONFIG_FILE_1 = "hospital_db.xml";
  
  protected static final String CONFIG_FILE_2 = "hospital_db_2.xml";
  
//  protected static final String CONFIG_FILE_ABSOLUTE_PATH = "c:\\" + RESOURCE_LOCATION + CONFIG_FILE;
  
//  ListableBeanFactory factory;

  public HospitalDBWriterTestCase() throws BeansException, MalformedURLException {
//    factory = new XmlBeanFactory(new UrlResource("file:" + 
//        ResourceUtil.getResourcePath(this, RESOURCE_LOCATION, CONFIG_FILE)));
  }
  
 
  protected String getSchemaDefinition() {
    return schema;
  }

  /**
   * Ensures the hospital is empty.
   */
  public void testHospitalIsEmpty1() throws Exception{
    PreparedStatement preparedStmt = jdbcConnection.getConnection().prepareStatement(SELECT_ALL_ERRORS_SQL);
    ResultSet rs = preparedStmt.executeQuery();
    assertFalse("Hospital not empty", rs.next());
    preparedStmt.close();
  }
  
  /**
   * Runs adaptor with nodes that don't throw any exceptions.
   * Ensures the hospital is empty.
   */
  public void testHospitalIsEmpty2() throws Exception{
    SpringAdaptor adaptor = new SpringAdaptor();
    UrlResource urlResource = new UrlResource("file:" + ResourceUtil.getResourcePath(
        this, RESOURCE_LOCATION, CONFIG_FILE_1));
    String configPath = urlResource.getFile().getAbsolutePath();
    adaptor.addConfigUrl(configPath);
    adaptor.run();
    PreparedStatement preparedStmt = jdbcConnection.getConnection().prepareStatement(SELECT_ALL_ERRORS_SQL);
    ResultSet rs = preparedStmt.executeQuery();
    assertFalse("Hospital not empty", rs.next());
    preparedStmt.close();
  }


  /**
   * Runs adaptor with a node that throws an exception. 
   */
  public void testHospitalGetsOneException() throws Exception{
    SpringAdaptor adaptor = new SpringAdaptor();
    UrlResource urlResource = new UrlResource("file:" + ResourceUtil.getResourcePath(
        this, RESOURCE_LOCATION, CONFIG_FILE_2));
    String configPath = urlResource.getFile().getAbsolutePath();
    adaptor.addConfigUrl(configPath);
    adaptor.run();
    PreparedStatement preparedStmt = jdbcConnection.getConnection().prepareStatement(SELECT_ALL_ERRORS_SQL);
    ResultSet rs = preparedStmt.executeQuery();
    assertTrue("Hospital is empty", rs.next());
    preparedStmt.close();
  }
  
  public static final class TestReadConnector implements IReadConnector {
    private boolean isDry = false;
    
    public void connect() {}
    public void disconnect() {}
    public Object getReaderContext() {return null;}
   
    public boolean isDry() { 
      boolean result = isDry;
      isDry = true;
      return result;
    }
   
    public Object[] next(long timeoutMs) { 
      return new String[]{"Dummy read connector test data"}; 
    }
    
    public void validate(List exceptions) {}
  }
  
  
  public static final class DummyWriteConnector implements IWriteConnector {
    public void connect() {}
    public void disconnect() {}
    public Object deliver(Object[] data) {return null;}
    public void validate(List exceptions) {}
  }
  
  public static final class ExceptionThrowingWriteConnector implements IWriteConnector {
    public void connect() {}
    public void disconnect() {}
    public Object deliver(Object[] data) {
       throw new RuntimeException();
    }
    public void validate(List exceptions) {}
  }
}
